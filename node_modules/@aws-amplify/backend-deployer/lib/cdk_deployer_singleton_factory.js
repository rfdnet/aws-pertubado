import { CDKDeployer } from './cdk_deployer.js';
import { CdkErrorMapper } from './cdk_error_mapper.js';
import { BackendLocator } from '@aws-amplify/platform-core';
import { Toolkit } from '@aws-cdk/toolkit-lib';
/**
 * Factory to create a backend deployer
 */
export class BackendDeployerFactory {
    packageManagerController;
    formatter;
    backendDeployerIOHost;
    sdkProfileResolver;
    static instance;
    /**
     * constructor - sets the packageManagerController
     */
    constructor(packageManagerController, formatter, backendDeployerIOHost, sdkProfileResolver) {
        this.packageManagerController = packageManagerController;
        this.formatter = formatter;
        this.backendDeployerIOHost = backendDeployerIOHost;
        this.sdkProfileResolver = sdkProfileResolver;
    }
    /**
     * Returns a single instance of BackendDeployer
     */
    getInstance() {
        if (!BackendDeployerFactory.instance) {
            BackendDeployerFactory.instance = new CDKDeployer(new CdkErrorMapper(this.formatter), new BackendLocator(), this.packageManagerController, new Toolkit({
                ioHost: this.backendDeployerIOHost,
                emojis: false,
                color: false,
                sdkConfig: {
                    profile: this.sdkProfileResolver(),
                },
            }), this.backendDeployerIOHost);
        }
        return BackendDeployerFactory.instance;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2RlcGxveWVyX3NpbmdsZXRvbl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nka19kZXBsb3llcl9zaW5nbGV0b25fZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUErQi9DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHNCQUFzQjtJQU9kO0lBQ0E7SUFDQTtJQUNBO0lBVFgsTUFBTSxDQUFDLFFBQVEsQ0FBOEI7SUFFckQ7O09BRUc7SUFDSCxZQUNtQix3QkFBa0QsRUFDbEQsU0FBeUMsRUFDekMscUJBQW9DLEVBQ3BDLGtCQUFzQztRQUh0Qyw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELGNBQVMsR0FBVCxTQUFTLENBQWdDO1FBQ3pDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBZTtRQUNwQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQ3RELENBQUM7SUFFSjs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckMsc0JBQXNCLENBQUMsUUFBUSxHQUFHLElBQUksV0FBVyxDQUMvQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQ2xDLElBQUksY0FBYyxFQUFFLEVBQ3BCLElBQUksQ0FBQyx3QkFBd0IsRUFDN0IsSUFBSSxPQUFPLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUI7Z0JBQ2xDLE1BQU0sRUFBRSxLQUFLO2dCQUNiLEtBQUssRUFBRSxLQUFLO2dCQUNaLFNBQVMsRUFBRTtvQkFDVCxPQUFPLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFO2lCQUNuQzthQUNGLENBQUMsRUFDRixJQUFJLENBQUMscUJBQXFCLENBQzNCLENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyxzQkFBc0IsQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW1wbGlmeUlPSG9zdCxcbiAgQmFja2VuZElkZW50aWZpZXIsXG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcixcbiAgU0RLUHJvZmlsZVJlc29sdmVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IENES0RlcGxveWVyIH0gZnJvbSAnLi9jZGtfZGVwbG95ZXIuanMnO1xuaW1wb3J0IHsgQ2RrRXJyb3JNYXBwZXIgfSBmcm9tICcuL2Nka19lcnJvcl9tYXBwZXIuanMnO1xuaW1wb3J0IHsgQmFja2VuZExvY2F0b3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXJPdXRwdXRGb3JtYXR0ZXIgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IFRvb2xraXQgfSBmcm9tICdAYXdzLWNkay90b29sa2l0LWxpYic7XG5cbmV4cG9ydCB0eXBlIERlcGxveVByb3BzID0ge1xuICBzZWNyZXRMYXN0VXBkYXRlZD86IERhdGU7XG4gIHZhbGlkYXRlQXBwU291cmNlcz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3lSZXN1bHQgPSB7XG4gIGRlcGxveW1lbnRUaW1lczogRGVwbG95bWVudFRpbWVzO1xufTtcblxuZXhwb3J0IHR5cGUgRGVzdHJveVJlc3VsdCA9IHtcbiAgZGVwbG95bWVudFRpbWVzOiBEZXBsb3ltZW50VGltZXM7XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3ltZW50VGltZXMgPSB7XG4gIHN5bnRoZXNpc1RpbWU/OiBudW1iZXI7XG4gIHRvdGFsVGltZT86IG51bWJlcjtcbn07XG5cbi8qKlxuICogSW52b2tlcyBhbiBpbnZva2FibGUgY29tbWFuZFxuICovXG5leHBvcnQgdHlwZSBCYWNrZW5kRGVwbG95ZXIgPSB7XG4gIGRlcGxveTogKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIsXG4gICAgZGVwbG95UHJvcHM/OiBEZXBsb3lQcm9wcyxcbiAgKSA9PiBQcm9taXNlPERlcGxveVJlc3VsdD47XG4gIGRlc3Ryb3k6IChiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyKSA9PiBQcm9taXNlPERlc3Ryb3lSZXN1bHQ+O1xufTtcblxuLyoqXG4gKiBGYWN0b3J5IHRvIGNyZWF0ZSBhIGJhY2tlbmQgZGVwbG95ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tlbmREZXBsb3llckZhY3Rvcnkge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogQmFja2VuZERlcGxveWVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBjb25zdHJ1Y3RvciAtIHNldHMgdGhlIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXI6IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZvcm1hdHRlcjogQmFja2VuZERlcGxveWVyT3V0cHV0Rm9ybWF0dGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja2VuZERlcGxveWVySU9Ib3N0OiBBbXBsaWZ5SU9Ib3N0LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2RrUHJvZmlsZVJlc29sdmVyOiBTREtQcm9maWxlUmVzb2x2ZXIsXG4gICkge31cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNpbmdsZSBpbnN0YW5jZSBvZiBCYWNrZW5kRGVwbG95ZXJcbiAgICovXG4gIGdldEluc3RhbmNlKCk6IEJhY2tlbmREZXBsb3llciB7XG4gICAgaWYgKCFCYWNrZW5kRGVwbG95ZXJGYWN0b3J5Lmluc3RhbmNlKSB7XG4gICAgICBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5Lmluc3RhbmNlID0gbmV3IENES0RlcGxveWVyKFxuICAgICAgICBuZXcgQ2RrRXJyb3JNYXBwZXIodGhpcy5mb3JtYXR0ZXIpLFxuICAgICAgICBuZXcgQmFja2VuZExvY2F0b3IoKSxcbiAgICAgICAgdGhpcy5wYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIsXG4gICAgICAgIG5ldyBUb29sa2l0KHtcbiAgICAgICAgICBpb0hvc3Q6IHRoaXMuYmFja2VuZERlcGxveWVySU9Ib3N0LFxuICAgICAgICAgIGVtb2ppczogZmFsc2UsXG4gICAgICAgICAgY29sb3I6IGZhbHNlLFxuICAgICAgICAgIHNka0NvbmZpZzoge1xuICAgICAgICAgICAgcHJvZmlsZTogdGhpcy5zZGtQcm9maWxlUmVzb2x2ZXIoKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5iYWNrZW5kRGVwbG95ZXJJT0hvc3QsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gQmFja2VuZERlcGxveWVyRmFjdG9yeS5pbnN0YW5jZTtcbiAgfVxufVxuIl19