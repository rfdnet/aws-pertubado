"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphqlRequestExecutor = void 0;
/**
 * This class is responsible for executing GraphQL requests.
 * Serializing query and it's inputs, adding authorization headers,
 * inspecting response for errors and de-serializing output.
 */
class GraphqlRequestExecutor {
    /**
     * Creates GraphQL request executor.
     */
    constructor(graphQlEndpoint, accessToken, userAgentProvider, _fetch = fetch) {
        this.graphQlEndpoint = graphQlEndpoint;
        this.accessToken = accessToken;
        this.userAgentProvider = userAgentProvider;
        this._fetch = _fetch;
        this.executeGraphql = async (request, options) => {
            var _a;
            const httpRequest = new Request(this.graphQlEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/graphql',
                    Authorization: this.accessToken,
                    'x-amz-user-agent': (_a = options === null || options === void 0 ? void 0 : options.userAgent) !== null && _a !== void 0 ? _a : this.userAgentProvider.getUserAgent(),
                },
                body: JSON.stringify({
                    query: request.query,
                    variables: request.variables,
                }),
            });
            const res = await this._fetch(httpRequest);
            const responseHeaders = {};
            res.headers.forEach((value, key) => (responseHeaders[key] = value));
            if (!res.ok) {
                const body = await res.text();
                throw new Error(`GraphQL request failed, response headers=${JSON.stringify(responseHeaders)}, body=${body}`);
            }
            const body = await res.json();
            if (body && typeof body === 'object' && 'errors' in body) {
                throw new Error(`GraphQL request failed, response headers=${JSON.stringify(responseHeaders)}, body=${JSON.stringify(body)}`);
            }
            return body;
        };
    }
}
exports.GraphqlRequestExecutor = GraphqlRequestExecutor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9yZXF1ZXN0X2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9ydW50aW1lL2dyYXBocWxfcmVxdWVzdF9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQTs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBc0I7SUFDakM7O09BRUc7SUFDSCxZQUNtQixlQUF1QixFQUN2QixXQUFtQixFQUNuQixpQkFBb0MsRUFDcEMsU0FBUyxLQUFLO1FBSGQsb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBR2pDLG1CQUFjLEdBQUcsS0FBSyxFQUNwQixPQUFtQyxFQUNuQyxPQUVDLEVBQ2lCLEVBQUU7O1lBQ3BCLE1BQU0sV0FBVyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BELE1BQU0sRUFBRSxNQUFNO2dCQUNkLE9BQU8sRUFBRTtvQkFDUCxjQUFjLEVBQUUscUJBQXFCO29CQUNyQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVc7b0JBQy9CLGtCQUFrQixFQUNoQixNQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxTQUFTLG1DQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUU7aUJBQzlEO2dCQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNuQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7b0JBQ3BCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUztpQkFDN0IsQ0FBQzthQUNILENBQUMsQ0FBQztZQUVILE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzQyxNQUFNLGVBQWUsR0FBMkIsRUFBRSxDQUFDO1lBQ25ELEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtnQkFDWCxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDOUIsTUFBTSxJQUFJLEtBQUssQ0FDYiw0Q0FBNEMsSUFBSSxDQUFDLFNBQVMsQ0FDeEQsZUFBZSxDQUNoQixVQUFVLElBQUksRUFBRSxDQUNsQixDQUFDO2FBQ0g7WUFDRCxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM5QixJQUFJLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtnQkFDeEQsTUFBTSxJQUFJLEtBQUssQ0FDYiw0Q0FBNEMsSUFBSSxDQUFDLFNBQVMsQ0FDeEQsZUFBZSxDQUNoQixVQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDbEMsQ0FBQzthQUNIO1lBQ0QsT0FBTyxJQUFlLENBQUM7UUFDekIsQ0FBQyxDQUFDO0lBMUNDLENBQUM7Q0EyQ0w7QUFwREQsd0RBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlckFnZW50UHJvdmlkZXIgfSBmcm9tICcuL3VzZXJfYWdlbnRfcHJvdmlkZXInO1xuXG5leHBvcnQgdHlwZSBHcmFwaHFsUmVxdWVzdDxUVmFyaWFibGVzPiA9IHtcbiAgcXVlcnk6IHN0cmluZztcbiAgdmFyaWFibGVzOiBUVmFyaWFibGVzO1xufTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBleGVjdXRpbmcgR3JhcGhRTCByZXF1ZXN0cy5cbiAqIFNlcmlhbGl6aW5nIHF1ZXJ5IGFuZCBpdCdzIGlucHV0cywgYWRkaW5nIGF1dGhvcml6YXRpb24gaGVhZGVycyxcbiAqIGluc3BlY3RpbmcgcmVzcG9uc2UgZm9yIGVycm9ycyBhbmQgZGUtc2VyaWFsaXppbmcgb3V0cHV0LlxuICovXG5leHBvcnQgY2xhc3MgR3JhcGhxbFJlcXVlc3RFeGVjdXRvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIEdyYXBoUUwgcmVxdWVzdCBleGVjdXRvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhcGhRbEVuZHBvaW50OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBhY2Nlc3NUb2tlbjogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdXNlckFnZW50UHJvdmlkZXI6IFVzZXJBZ2VudFByb3ZpZGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2ZldGNoID0gZmV0Y2gsXG4gICkge31cblxuICBleGVjdXRlR3JhcGhxbCA9IGFzeW5jIDxUVmFyaWFibGVzLCBUUmV0dXJuPihcbiAgICByZXF1ZXN0OiBHcmFwaHFsUmVxdWVzdDxUVmFyaWFibGVzPixcbiAgICBvcHRpb25zPzoge1xuICAgICAgdXNlckFnZW50Pzogc3RyaW5nO1xuICAgIH0sXG4gICk6IFByb21pc2U8VFJldHVybj4gPT4ge1xuICAgIGNvbnN0IGh0dHBSZXF1ZXN0ID0gbmV3IFJlcXVlc3QodGhpcy5ncmFwaFFsRW5kcG9pbnQsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2dyYXBocWwnLFxuICAgICAgICBBdXRob3JpemF0aW9uOiB0aGlzLmFjY2Vzc1Rva2VuLFxuICAgICAgICAneC1hbXotdXNlci1hZ2VudCc6XG4gICAgICAgICAgb3B0aW9ucz8udXNlckFnZW50ID8/IHRoaXMudXNlckFnZW50UHJvdmlkZXIuZ2V0VXNlckFnZW50KCksXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBxdWVyeTogcmVxdWVzdC5xdWVyeSxcbiAgICAgICAgdmFyaWFibGVzOiByZXF1ZXN0LnZhcmlhYmxlcyxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fZmV0Y2goaHR0cFJlcXVlc3QpO1xuICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgIHJlcy5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IChyZXNwb25zZUhlYWRlcnNba2V5XSA9IHZhbHVlKSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgR3JhcGhRTCByZXF1ZXN0IGZhaWxlZCwgcmVzcG9uc2UgaGVhZGVycz0ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgKX0sIGJvZHk9JHtib2R5fWAsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAoYm9keSAmJiB0eXBlb2YgYm9keSA9PT0gJ29iamVjdCcgJiYgJ2Vycm9ycycgaW4gYm9keSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgR3JhcGhRTCByZXF1ZXN0IGZhaWxlZCwgcmVzcG9uc2UgaGVhZGVycz0ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgKX0sIGJvZHk9JHtKU09OLnN0cmluZ2lmeShib2R5KX1gLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGJvZHkgYXMgVFJldHVybjtcbiAgfTtcbn1cbiJdfQ==