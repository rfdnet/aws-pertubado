"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializableError = void 0;
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const os_1 = require("os");
/**
 * Wrapper around Error for serialization for usage metrics
 */
class SerializableError {
    name;
    message;
    details;
    trace;
    // breakdown of filePathRegex:
    // (file:/+)? -> matches optional file url prefix
    // homedir() -> users home directory, replacing \ with /
    // [\\w.\\-_@\\\\/]+ -> matches nested directories and file name
    filePathRegex = new RegExp(`(file:/+)?${(0, os_1.homedir)().replaceAll('\\', '/')}[\\w.\\-_@\\\\/]+`, 'g');
    stackTraceRegex = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    arnRegex = /arn:[a-z0-9][-.a-z0-9]{0,62}:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}/g;
    stackRegex = /amplify-[a-zA-Z0-9-]+/g;
    /**
     * constructor for SerializableError
     */
    constructor(error) {
        this.name =
            'code' in error && error.code
                ? this.sanitize(error.code)
                : error.name;
        this.message = this.anonymizePaths(this.sanitize(error.message));
        this.details =
            'details' in error
                ? this.anonymizePaths(this.sanitize(error.details))
                : undefined;
        this.trace = this.extractStackTrace(error);
    }
    extractStackTrace = (error) => {
        const result = [];
        if (error.stack) {
            const stack = error.stack.split('\n');
            stack.forEach((line) => {
                const match = this.stackTraceRegex.exec(line);
                if (match) {
                    const [, methodName, file, lineNumber, columnNumber] = match;
                    result.push({
                        methodName,
                        file,
                        lineNumber,
                        columnNumber,
                    });
                }
            });
            const processedPaths = this.processPaths(result.map((trace) => trace.file));
            result.forEach((trace, index) => {
                trace.file = processedPaths[index];
            });
        }
        return result;
    };
    anonymizePaths = (str) => {
        let result = str;
        const matches = [...result.matchAll(this.filePathRegex)];
        for (const match of matches) {
            result = result.replace(match[0], this.processPaths([match[0]])[0]);
        }
        return result;
    };
    processPaths = (paths) => {
        return paths.map((tracePath) => {
            let result = tracePath;
            if (this.isURLFilePath(result)) {
                result = (0, url_1.fileURLToPath)(result);
            }
            if (path_1.default.isAbsolute(result)) {
                return path_1.default.relative(process.cwd(), result);
            }
            return result;
        });
    };
    removeARN = (str) => {
        return str?.replace(this.arnRegex, '<escaped ARN>') ?? '';
    };
    removeStackIdentifier = (str) => {
        return str?.replace(this.stackRegex, '<escaped stack>') ?? '';
    };
    sanitize = (str) => {
        let result = str;
        result = this.removeARN(result);
        result = this.removeStackIdentifier(result);
        return result.replaceAll(/["❌]/g, '');
    };
    isURLFilePath = (path) => {
        try {
            new URL(path);
            return path.startsWith('file:');
        }
        catch {
            return false;
        }
    };
}
exports.SerializableError = SerializableError;
//# sourceMappingURL=data:application/json;base64,