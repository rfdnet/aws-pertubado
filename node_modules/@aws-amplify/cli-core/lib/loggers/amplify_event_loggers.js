import { LogLevel } from '../printer/printer.js';
import { printer as globalPrinter, minimumLogLevel } from '../printer.js';
import { format } from '../format/format.js';
import { CfnDeploymentProgressLogger, } from './cfn-deployment-progress/cfn_deployment_progress_logger.js';
import { WriteStream } from 'node:tty';
import { RewritableBlock } from './cfn-deployment-progress/rewritable_block.js';
import { EOL } from 'node:os';
import { context as openTelemetryContext, trace as openTelemetryTrace, } from '@opentelemetry/api';
import { setSpanAttributes } from '@aws-amplify/platform-core';
/**
 * Amplify events logger class. Implements several loggers that connect
 * to the amplify_io_event_bridge for showing relevant information to customers
 */
export class AmplifyEventLogger {
    printer;
    amplifyIOEventsBridgeSingletonFactory;
    cfnDeploymentProgressLogger;
    outputs = {};
    isHotSwap = false;
    /**
     * a logger instance to be used for CDK events
     */
    constructor(printer = globalPrinter, amplifyIOEventsBridgeSingletonFactory) {
        this.printer = printer;
        this.amplifyIOEventsBridgeSingletonFactory = amplifyIOEventsBridgeSingletonFactory;
    }
    getEventLoggers = () => {
        if (minimumLogLevel === LogLevel.DEBUG) {
            return {
                notify: [this.debug],
            };
        }
        const loggers = [this.amplifyNotifications, this.cdkDeploymentProgress];
        if (this.printer.ttyEnabled) {
            loggers.push(this.fancyCfnDeploymentProgress);
        }
        else {
            loggers.push(this.nonTtyCfnDeploymentProgress);
        }
        return {
            notify: loggers,
        };
    };
    /**
     * Log debug messages
     */
    debug = (msg) => {
        if (msg.level === 'trace' || msg.level === 'debug') {
            if (msg.data &&
                typeof msg.data === 'object' &&
                'sdkLevel' in msg.data &&
                'content' in msg.data &&
                Array.isArray(msg.data.content)) {
                msg.data.content.forEach((trace) => {
                    this.printer.log(`AWS SDK Call ${trace.clientName}: ${trace.commandName}`, LogLevel.DEBUG);
                });
            }
            else {
                this.printer.log(`[${msg.action}: ${msg.code}] ${msg.message}`, LogLevel.DEBUG);
            }
        }
        else {
            this.printer.log(`[${format.color(`${msg.action}: ${msg.code}`, msg.level === 'error'
                ? 'Red'
                : msg.level === 'warn'
                    ? 'Yellow'
                    : 'Green')}] ${format.note(msg.time.toLocaleTimeString())} ${msg.message.trim()} ${msg.data ? this.safeJsonStringifyForDebug(msg.data) : ''}`, LogLevel.DEBUG);
        }
        return Promise.resolve();
    };
    amplifyNotifications = async (msg) => {
        if (msg.action !== 'amplify') {
            return;
        }
        switch (msg.code) {
            case 'TS_STARTED':
                this.printer.startSpinner('Running type checks...');
                return;
            case 'TS_FINISHED':
                this.printer.stopSpinner();
                break;
            case 'SYNTH_STARTED':
                this.printer.startSpinner('Synthesizing backend...');
                return;
            case 'SYNTH_FINISHED':
                this.printer.stopSpinner();
                break;
            case 'DEPLOY_STARTED':
                this.printer.stopSpinner();
                break;
            case 'DEPLOY_FAILED':
                this.isHotSwap = false;
                return;
            case 'AMPLIFY_CFN_PROGRESS_UPDATE':
                if (!this.printer.isSpinnerRunning()) {
                    this.printer.startSpinner('Deployment in progress...');
                }
                this.printer.updateSpinner({ prefixText: msg.message });
                return;
        }
        this.printer.log(msg.level === 'result'
            ? `${format.success('✔')} ${msg.message}`
            : msg.level === 'error'
                ? format.error(msg.message)
                : msg.message, msg.level === 'error' ? LogLevel.ERROR : LogLevel.INFO);
    };
    cdkDeploymentProgress = async (msg) => {
        // Asset publishing if any.
        if (msg.message.includes('Checking for previously published assets')) {
            if (!this.printer.isSpinnerRunning()) {
                this.printer.startSpinner('Building and publishing assets...');
            }
            return Promise.resolve();
        }
        // Hot swap deployment
        if (msg.code === 'CDK_TOOLKIT_I5403') {
            const hotswappedResources = this.extractResourceNameFromHotSwapMessage(msg.data);
            let message = msg.message;
            if (hotswappedResources && hotswappedResources.length > 0) {
                this.isHotSwap = true;
                message = hotswappedResources
                    .map((resource) => `${format.success('✔')} Updated ${resource.resourceType} ${resource.resourceName}`)
                    .join(EOL);
            }
            if (this.printer.isSpinnerRunning()) {
                this.printer.stopSpinner();
                this.printer.log(message);
                this.printer.startSpinner('Deployment in progress...');
            }
            else {
                this.printer.log(message);
            }
        }
        // CFN Outputs we care about. CDK_TOOLKIT_I5900 code represents outputs message.
        // We save it so we can display at the end of the deployment.
        if (msg.code === 'CDK_TOOLKIT_I5900') {
            if (msg.data &&
                typeof msg.data === 'object' &&
                'outputs' in msg.data &&
                msg.data.outputs &&
                typeof msg.data.outputs === 'object') {
                this.outputs = msg.data.outputs;
            }
        }
        // Successful deployment or destruction with timing
        if (msg.code === 'CDK_TOOLKIT_I5000' || msg.code === 'CDK_TOOLKIT_I7000') {
            if (msg.data &&
                typeof msg.data === 'object' &&
                'duration' in msg.data &&
                msg.data.duration &&
                typeof msg.data.duration === 'number') {
                this.printer.log(`${format.success('✔')} Deployment completed in ${msg.data.duration / 1000} seconds`);
                if (this.outputs &&
                    'awsAppsyncApiEndpoint' in this.outputs &&
                    this.outputs.awsAppsyncApiEndpoint) {
                    this.printer.log(`AppSync API endpoint = ${format.link(this.outputs.awsAppsyncApiEndpoint)}`);
                }
                const span = openTelemetryTrace.getSpan(openTelemetryContext.active());
                if (this.isHotSwap && span) {
                    setSpanAttributes(span, {
                        latency: {
                            hotSwap: msg.data.duration,
                        },
                    });
                    this.isHotSwap = false;
                }
                else if (span) {
                    setSpanAttributes(span, {
                        latency: {
                            deployment: msg.data.duration,
                        },
                    });
                }
            }
        }
    };
    /**
     * Displays pretty print of cfn deployment progress. Disabled if debug logging is turned on
     * @param msg a CDK event
     */
    fancyCfnDeploymentProgress = async (msg) => {
        // 5100 -> Deployment starts 7100 -> Destroy starts
        if ((msg.code === 'CDK_TOOLKIT_I5100' || msg.code === 'CDK_TOOLKIT_I7100') &&
            !this.cfnDeploymentProgressLogger) {
            if (msg.code === 'CDK_TOOLKIT_I5100') {
                // Mark assets published. We use "deploy started" as a cue to mark that all assets have been published
                await this.amplifyIOEventsBridgeSingletonFactory.getInstance().notify({
                    message: `Built and published assets`,
                    code: 'DEPLOY_STARTED',
                    action: 'amplify',
                    time: new Date(),
                    level: 'result',
                    data: undefined,
                });
            }
            // Start deployment progress display
            this.cfnDeploymentProgressLogger = this.getNewCfnDeploymentProgressLogger(this.printer);
            this.printer.startSpinner('Deployment in progress...', {
                timeoutSeconds: 300,
            });
        }
        // Stop deployment progress display
        // 5000 includes deployment time
        // 5503 is when the deployment is completed (not emitted for some updates but emitted for destroy and fails)
        // 5900 includes the stack outputs
        // 7900 is when the stack is destroyed
        if (msg.code === 'CDK_TOOLKIT_I5000' ||
            msg.code === 'CDK_TOOLKIT_I5503' ||
            msg.code === 'CDK_TOOLKIT_I5900' ||
            msg.code === 'CDK_TOOLKIT_I7900') {
            if (this.cfnDeploymentProgressLogger) {
                this.printer.stopSpinner();
                this.cfnDeploymentProgressLogger = undefined;
            }
        }
        // CFN Deployment progress events information
        if (msg.code === 'CDK_TOOLKIT_I5502' &&
            msg.data &&
            typeof msg.data === 'object' &&
            'event' in msg.data) {
            const event = msg.data;
            this.cfnDeploymentProgressLogger?.addActivity(event);
        }
        // CDK Marker that deployment is still in progress, we take this opportunity
        // to display the aggregated events
        if (msg.code === 'CDK_TOOLKIT_I0000' &&
            msg.message.includes('has an ongoing operation in progress')) {
            await this.cfnDeploymentProgressLogger?.print();
        }
        return Promise.resolve();
    };
    /**
     * Non fancy cfn deployment progress for ci/cd or files
     */
    nonTtyCfnDeploymentProgress = async (msg) => {
        if (msg.code === 'CDK_TOOLKIT_I5100') {
            await this.amplifyIOEventsBridgeSingletonFactory.getInstance().notify({
                message: `Built and published assets`,
                code: 'DEPLOY_STARTED',
                action: 'amplify',
                time: new Date(),
                level: 'result',
                data: undefined,
            });
        }
        if (msg.code === 'CDK_TOOLKIT_I5502') {
            // CDKs formatted cfn deployment progress
            this.printer.print(msg.message);
        }
    };
    getNewCfnDeploymentProgressLogger = (printer) => {
        const getBlockWidth = () => printer.stdout instanceof WriteStream ? printer.stdout.columns : 600;
        const getBlockHeight = () => printer.stdout instanceof WriteStream ? printer.stdout.rows : 100;
        return new CfnDeploymentProgressLogger({
            getBlockWidth,
            rewritableBlock: new RewritableBlock(getBlockWidth, getBlockHeight, this.amplifyIOEventsBridgeSingletonFactory.getInstance()),
        });
    };
    extractResourceNameFromHotSwapMessage = (data) => {
        if (data &&
            typeof data === 'object' &&
            'resources' in data &&
            Array.isArray(data.resources)) {
            return data.resources.map((resource) => {
                return {
                    resourceName: resource?.metadata?.constructPath ?? resource.logicalId,
                    resourceType: resource.resourceType,
                };
            });
        }
        return undefined;
    };
    safeJsonStringifyForDebug = (data) => {
        try {
            return JSON.stringify(data, null, 2);
        }
        catch {
            return 'Failed to deserialize data';
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9ldmVudF9sb2dnZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlcnMvYW1wbGlmeV9ldmVudF9sb2dnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdDLE9BQU8sRUFDTCwyQkFBMkIsR0FFNUIsTUFBTSw2REFBNkQsQ0FBQztBQUVyRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUVoRixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFDTCxPQUFPLElBQUksb0JBQW9CLEVBQy9CLEtBQUssSUFBSSxrQkFBa0IsR0FDNUIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUvRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBU1Y7SUFDQTtJQVRYLDJCQUEyQixDQUEwQztJQUNyRSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2IsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUUxQjs7T0FFRztJQUNILFlBQ21CLFVBQW1CLGFBQWEsRUFDaEMscUNBQTRFO1FBRDVFLFlBQU8sR0FBUCxPQUFPLENBQXlCO1FBQ2hDLDBDQUFxQyxHQUFyQyxxQ0FBcUMsQ0FBdUM7SUFDNUYsQ0FBQztJQUVKLGVBQWUsR0FBRyxHQUFHLEVBQUU7UUFDckIsSUFBSSxlQUFlLEtBQUssUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3ZDLE9BQU87Z0JB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LE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVNLHlCQUF5QixHQUFHLENBQUMsSUFBYSxFQUFFLEVBQUU7UUFDcEQsSUFBSSxDQUFDO1lBQ0gsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUFDLE1BQU0sQ0FBQztZQUNQLE9BQU8sNEJBQTRCLENBQUM7UUFDdEMsQ0FBQztJQUNILENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nTGV2ZWwsIFByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgcHJpbnRlciBhcyBnbG9iYWxQcmludGVyLCBtaW5pbXVtTG9nTGV2ZWwgfSBmcm9tICcuLi9wcmludGVyLmpzJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXQuanMnO1xuaW1wb3J0IHtcbiAgQ2ZuRGVwbG95bWVudFByb2dyZXNzTG9nZ2VyLFxuICBDZm5EZXBsb3ltZW50U3RhY2tFdmVudCxcbn0gZnJvbSAnLi9jZm4tZGVwbG95bWVudC1wcm9ncmVzcy9jZm5fZGVwbG95bWVudF9wcm9ncmVzc19sb2dnZXIuanMnO1xuaW1wb3J0IHsgQW1wbGlmeUlvSG9zdEV2ZW50TWVzc2FnZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgV3JpdGVTdHJlYW0gfSBmcm9tICdub2RlOnR0eSc7XG5pbXBvcnQgeyBSZXdyaXRhYmxlQmxvY2sgfSBmcm9tICcuL2Nmbi1kZXBsb3ltZW50LXByb2dyZXNzL3Jld3JpdGFibGVfYmxvY2suanMnO1xuaW1wb3J0IHsgQW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeSB9IGZyb20gJy4vYW1wbGlmeV9pb19ldmVudHNfYnJpZGdlX3NpbmdsZXRvbl9mYWN0b3J5LmpzJztcbmltcG9ydCB7IEVPTCB9IGZyb20gJ25vZGU6b3MnO1xuaW1wb3J0IHtcbiAgY29udGV4dCBhcyBvcGVuVGVsZW1ldHJ5Q29udGV4dCxcbiAgdHJhY2UgYXMgb3BlblRlbGVtZXRyeVRyYWNlLFxufSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgc2V0U3BhbkF0dHJpYnV0ZXMgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogQW1wbGlmeSBldmVudHMgbG9nZ2VyIGNsYXNzLiBJbXBsZW1lbnRzIHNldmVyYWwgbG9nZ2VycyB0aGF0IGNvbm5lY3RcbiAqIHRvIHRoZSBhbXBsaWZ5X2lvX2V2ZW50X2JyaWRnZSBmb3Igc2hvd2luZyByZWxldmFudCBpbmZvcm1hdGlvbiB0byBjdXN0b21lcnNcbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlFdmVudExvZ2dlciB7XG4gIHByaXZhdGUgY2ZuRGVwbG95bWVudFByb2dyZXNzTG9nZ2VyOiBDZm5EZXBsb3ltZW50UHJvZ3Jlc3NMb2dnZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgb3V0cHV0cyA9IHt9O1xuICBwcml2YXRlIGlzSG90U3dhcCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBhIGxvZ2dlciBpbnN0YW5jZSB0byBiZSB1c2VkIGZvciBDREsgZXZlbnRzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXIgPSBnbG9iYWxQcmludGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeTogQW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeSxcbiAgKSB7fVxuXG4gIGdldEV2ZW50TG9nZ2VycyA9ICgpID0+IHtcbiAgICBpZiAobWluaW11bUxvZ0xldmVsID09PSBMb2dMZXZlbC5ERUJVRykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm90aWZ5OiBbdGhpcy5kZWJ1Z10sXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBsb2dnZXJzID0gW3RoaXMuYW1wbGlmeU5vdGlmaWNhdGlvbnMsIHRoaXMuY2RrRGVwbG95bWVudFByb2dyZXNzXTtcbiAgICBpZiAodGhpcy5wcmludGVyLnR0eUVuYWJsZWQpIHtcbiAgICAgIGxvZ2dlcnMucHVzaCh0aGlzLmZhbmN5Q2ZuRGVwbG95bWVudFByb2dyZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2Vycy5wdXNoKHRoaXMubm9uVHR5Q2ZuRGVwbG95bWVudFByb2dyZXNzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vdGlmeTogbG9nZ2VycyxcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBMb2cgZGVidWcgbWVzc2FnZXNcbiAgICovXG4gIGRlYnVnID0gPFQ+KG1zZzogQW1wbGlmeUlvSG9zdEV2ZW50TWVzc2FnZTxUPik6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmIChtc2cubGV2ZWwgPT09ICd0cmFjZScgfHwgbXNnLmxldmVsID09PSAnZGVidWcnKSB7XG4gICAgICBpZiAoXG4gICAgICAgIG1zZy5kYXRhICYmXG4gICAgICAgIHR5cGVvZiBtc2cuZGF0YSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgJ3Nka0xldmVsJyBpbiBtc2cuZGF0YSAmJlxuICAgICAgICAnY29udGVudCcgaW4gbXNnLmRhdGEgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShtc2cuZGF0YS5jb250ZW50KVxuICAgICAgKSB7XG4gICAgICAgIG1zZy5kYXRhLmNvbnRlbnQuZm9yRWFjaChcbiAgICAgICAgICAodHJhY2U6IHsgY2xpZW50TmFtZTogc3RyaW5nOyBjb21tYW5kTmFtZTogc3RyaW5nIH0pID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgICAgIGBBV1MgU0RLIENhbGwgJHt0cmFjZS5jbGllbnROYW1lfTogJHt0cmFjZS5jb21tYW5kTmFtZX1gLFxuICAgICAgICAgICAgICBMb2dMZXZlbC5ERUJVRyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgYFske21zZy5hY3Rpb259OiAke21zZy5jb2RlfV0gJHttc2cubWVzc2FnZX1gLFxuICAgICAgICAgIExvZ0xldmVsLkRFQlVHLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByaW50ZXIubG9nKFxuICAgICAgICBgWyR7Zm9ybWF0LmNvbG9yKFxuICAgICAgICAgIGAke21zZy5hY3Rpb259OiAke21zZy5jb2RlfWAsXG4gICAgICAgICAgbXNnLmxldmVsID09PSAnZXJyb3InXG4gICAgICAgICAgICA/ICdSZWQnXG4gICAgICAgICAgICA6IG1zZy5sZXZlbCA9PT0gJ3dhcm4nXG4gICAgICAgICAgICAgID8gJ1llbGxvdydcbiAgICAgICAgICAgICAgOiAnR3JlZW4nLFxuICAgICAgICApfV0gJHtmb3JtYXQubm90ZShcbiAgICAgICAgICBtc2cudGltZS50b0xvY2FsZVRpbWVTdHJpbmcoKSxcbiAgICAgICAgKX0gJHttc2cubWVzc2FnZS50cmltKCl9ICR7XG4gICAgICAgICAgbXNnLmRhdGEgPyB0aGlzLnNhZmVKc29uU3RyaW5naWZ5Rm9yRGVidWcobXNnLmRhdGEpIDogJydcbiAgICAgICAgfWAsXG4gICAgICAgIExvZ0xldmVsLkRFQlVHLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIGFtcGxpZnlOb3RpZmljYXRpb25zID0gYXN5bmMgPFQ+KFxuICAgIG1zZzogQW1wbGlmeUlvSG9zdEV2ZW50TWVzc2FnZTxUPixcbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKG1zZy5hY3Rpb24gIT09ICdhbXBsaWZ5Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKG1zZy5jb2RlKSB7XG4gICAgICBjYXNlICdUU19TVEFSVEVEJzpcbiAgICAgICAgdGhpcy5wcmludGVyLnN0YXJ0U3Bpbm5lcignUnVubmluZyB0eXBlIGNoZWNrcy4uLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlICdUU19GSU5JU0hFRCc6XG4gICAgICAgIHRoaXMucHJpbnRlci5zdG9wU3Bpbm5lcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1NZTlRIX1NUQVJURUQnOlxuICAgICAgICB0aGlzLnByaW50ZXIuc3RhcnRTcGlubmVyKCdTeW50aGVzaXppbmcgYmFja2VuZC4uLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlICdTWU5USF9GSU5JU0hFRCc6XG4gICAgICAgIHRoaXMucHJpbnRlci5zdG9wU3Bpbm5lcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0RFUExPWV9TVEFSVEVEJzpcbiAgICAgICAgdGhpcy5wcmludGVyLnN0b3BTcGlubmVyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnREVQTE9ZX0ZBSUxFRCc6XG4gICAgICAgIHRoaXMuaXNIb3RTd2FwID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgJ0FNUExJRllfQ0ZOX1BST0dSRVNTX1VQREFURSc6XG4gICAgICAgIGlmICghdGhpcy5wcmludGVyLmlzU3Bpbm5lclJ1bm5pbmcoKSkge1xuICAgICAgICAgIHRoaXMucHJpbnRlci5zdGFydFNwaW5uZXIoJ0RlcGxveW1lbnQgaW4gcHJvZ3Jlc3MuLi4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaW50ZXIudXBkYXRlU3Bpbm5lcih7IHByZWZpeFRleHQ6IG1zZy5tZXNzYWdlIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICBtc2cubGV2ZWwgPT09ICdyZXN1bHQnXG4gICAgICAgID8gYCR7Zm9ybWF0LnN1Y2Nlc3MoJ+KclCcpfSAke21zZy5tZXNzYWdlfWBcbiAgICAgICAgOiBtc2cubGV2ZWwgPT09ICdlcnJvcidcbiAgICAgICAgICA/IGZvcm1hdC5lcnJvcihtc2cubWVzc2FnZSlcbiAgICAgICAgICA6IG1zZy5tZXNzYWdlLFxuICAgICAgbXNnLmxldmVsID09PSAnZXJyb3InID8gTG9nTGV2ZWwuRVJST1IgOiBMb2dMZXZlbC5JTkZPLFxuICAgICk7XG4gIH07XG5cbiAgY2RrRGVwbG95bWVudFByb2dyZXNzID0gYXN5bmMgPFQ+KFxuICAgIG1zZzogQW1wbGlmeUlvSG9zdEV2ZW50TWVzc2FnZTxUPixcbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gQXNzZXQgcHVibGlzaGluZyBpZiBhbnkuXG4gICAgaWYgKG1zZy5tZXNzYWdlLmluY2x1ZGVzKCdDaGVja2luZyBmb3IgcHJldmlvdXNseSBwdWJsaXNoZWQgYXNzZXRzJykpIHtcbiAgICAgIGlmICghdGhpcy5wcmludGVyLmlzU3Bpbm5lclJ1bm5pbmcoKSkge1xuICAgICAgICB0aGlzLnByaW50ZXIuc3RhcnRTcGlubmVyKCdCdWlsZGluZyBhbmQgcHVibGlzaGluZyBhc3NldHMuLi4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvLyBIb3Qgc3dhcCBkZXBsb3ltZW50XG4gICAgaWYgKG1zZy5jb2RlID09PSAnQ0RLX1RPT0xLSVRfSTU0MDMnKSB7XG4gICAgICBjb25zdCBob3Rzd2FwcGVkUmVzb3VyY2VzID0gdGhpcy5leHRyYWN0UmVzb3VyY2VOYW1lRnJvbUhvdFN3YXBNZXNzYWdlKFxuICAgICAgICBtc2cuZGF0YSxcbiAgICAgICk7XG4gICAgICBsZXQgbWVzc2FnZSA9IG1zZy5tZXNzYWdlO1xuICAgICAgaWYgKGhvdHN3YXBwZWRSZXNvdXJjZXMgJiYgaG90c3dhcHBlZFJlc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuaXNIb3RTd2FwID0gdHJ1ZTtcbiAgICAgICAgbWVzc2FnZSA9IGhvdHN3YXBwZWRSZXNvdXJjZXNcbiAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgKHJlc291cmNlKSA9PlxuICAgICAgICAgICAgICBgJHtmb3JtYXQuc3VjY2Vzcygn4pyUJyl9IFVwZGF0ZWQgJHtyZXNvdXJjZS5yZXNvdXJjZVR5cGV9ICR7cmVzb3VyY2UucmVzb3VyY2VOYW1lfWAsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5qb2luKEVPTCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcmludGVyLmlzU3Bpbm5lclJ1bm5pbmcoKSkge1xuICAgICAgICB0aGlzLnByaW50ZXIuc3RvcFNwaW5uZXIoKTtcbiAgICAgICAgdGhpcy5wcmludGVyLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5wcmludGVyLnN0YXJ0U3Bpbm5lcignRGVwbG95bWVudCBpbiBwcm9ncmVzcy4uLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcmludGVyLmxvZyhtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDRk4gT3V0cHV0cyB3ZSBjYXJlIGFib3V0LiBDREtfVE9PTEtJVF9JNTkwMCBjb2RlIHJlcHJlc2VudHMgb3V0cHV0cyBtZXNzYWdlLlxuICAgIC8vIFdlIHNhdmUgaXQgc28gd2UgY2FuIGRpc3BsYXkgYXQgdGhlIGVuZCBvZiB0aGUgZGVwbG95bWVudC5cbiAgICBpZiAobXNnLmNvZGUgPT09ICdDREtfVE9PTEtJVF9JNTkwMCcpIHtcbiAgICAgIGlmIChcbiAgICAgICAgbXNnLmRhdGEgJiZcbiAgICAgICAgdHlwZW9mIG1zZy5kYXRhID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAnb3V0cHV0cycgaW4gbXNnLmRhdGEgJiZcbiAgICAgICAgbXNnLmRhdGEub3V0cHV0cyAmJlxuICAgICAgICB0eXBlb2YgbXNnLmRhdGEub3V0cHV0cyA9PT0gJ29iamVjdCdcbiAgICAgICkge1xuICAgICAgICB0aGlzLm91dHB1dHMgPSBtc2cuZGF0YS5vdXRwdXRzO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN1Y2Nlc3NmdWwgZGVwbG95bWVudCBvciBkZXN0cnVjdGlvbiB3aXRoIHRpbWluZ1xuICAgIGlmIChtc2cuY29kZSA9PT0gJ0NES19UT09MS0lUX0k1MDAwJyB8fCBtc2cuY29kZSA9PT0gJ0NES19UT09MS0lUX0k3MDAwJykge1xuICAgICAgaWYgKFxuICAgICAgICBtc2cuZGF0YSAmJlxuICAgICAgICB0eXBlb2YgbXNnLmRhdGEgPT09ICdvYmplY3QnICYmXG4gICAgICAgICdkdXJhdGlvbicgaW4gbXNnLmRhdGEgJiZcbiAgICAgICAgbXNnLmRhdGEuZHVyYXRpb24gJiZcbiAgICAgICAgdHlwZW9mIG1zZy5kYXRhLmR1cmF0aW9uID09PSAnbnVtYmVyJ1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgYCR7Zm9ybWF0LnN1Y2Nlc3MoJ+KclCcpfSBEZXBsb3ltZW50IGNvbXBsZXRlZCBpbiAke1xuICAgICAgICAgICAgbXNnLmRhdGEuZHVyYXRpb24gLyAxMDAwXG4gICAgICAgICAgfSBzZWNvbmRzYCxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMub3V0cHV0cyAmJlxuICAgICAgICAgICdhd3NBcHBzeW5jQXBpRW5kcG9pbnQnIGluIHRoaXMub3V0cHV0cyAmJlxuICAgICAgICAgIHRoaXMub3V0cHV0cy5hd3NBcHBzeW5jQXBpRW5kcG9pbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgICAgICAgIGBBcHBTeW5jIEFQSSBlbmRwb2ludCA9ICR7Zm9ybWF0LmxpbmsoXG4gICAgICAgICAgICAgIHRoaXMub3V0cHV0cy5hd3NBcHBzeW5jQXBpRW5kcG9pbnQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgKX1gLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3BhbiA9IG9wZW5UZWxlbWV0cnlUcmFjZS5nZXRTcGFuKG9wZW5UZWxlbWV0cnlDb250ZXh0LmFjdGl2ZSgpKTtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3RTd2FwICYmIHNwYW4pIHtcbiAgICAgICAgICBzZXRTcGFuQXR0cmlidXRlcyhzcGFuLCB7XG4gICAgICAgICAgICBsYXRlbmN5OiB7XG4gICAgICAgICAgICAgIGhvdFN3YXA6IG1zZy5kYXRhLmR1cmF0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmlzSG90U3dhcCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHNwYW4pIHtcbiAgICAgICAgICBzZXRTcGFuQXR0cmlidXRlcyhzcGFuLCB7XG4gICAgICAgICAgICBsYXRlbmN5OiB7XG4gICAgICAgICAgICAgIGRlcGxveW1lbnQ6IG1zZy5kYXRhLmR1cmF0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcGxheXMgcHJldHR5IHByaW50IG9mIGNmbiBkZXBsb3ltZW50IHByb2dyZXNzLiBEaXNhYmxlZCBpZiBkZWJ1ZyBsb2dnaW5nIGlzIHR1cm5lZCBvblxuICAgKiBAcGFyYW0gbXNnIGEgQ0RLIGV2ZW50XG4gICAqL1xuICBmYW5jeUNmbkRlcGxveW1lbnRQcm9ncmVzcyA9IGFzeW5jIDxUPihcbiAgICBtc2c6IEFtcGxpZnlJb0hvc3RFdmVudE1lc3NhZ2U8VD4sXG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIC8vIDUxMDAgLT4gRGVwbG95bWVudCBzdGFydHMgNzEwMCAtPiBEZXN0cm95IHN0YXJ0c1xuICAgIGlmIChcbiAgICAgIChtc2cuY29kZSA9PT0gJ0NES19UT09MS0lUX0k1MTAwJyB8fCBtc2cuY29kZSA9PT0gJ0NES19UT09MS0lUX0k3MTAwJykgJiZcbiAgICAgICF0aGlzLmNmbkRlcGxveW1lbnRQcm9ncmVzc0xvZ2dlclxuICAgICkge1xuICAgICAgaWYgKG1zZy5jb2RlID09PSAnQ0RLX1RPT0xLSVRfSTUxMDAnKSB7XG4gICAgICAgIC8vIE1hcmsgYXNzZXRzIHB1Ymxpc2hlZC4gV2UgdXNlIFwiZGVwbG95IHN0YXJ0ZWRcIiBhcyBhIGN1ZSB0byBtYXJrIHRoYXQgYWxsIGFzc2V0cyBoYXZlIGJlZW4gcHVibGlzaGVkXG4gICAgICAgIGF3YWl0IHRoaXMuYW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeS5nZXRJbnN0YW5jZSgpLm5vdGlmeSh7XG4gICAgICAgICAgbWVzc2FnZTogYEJ1aWx0IGFuZCBwdWJsaXNoZWQgYXNzZXRzYCxcbiAgICAgICAgICBjb2RlOiAnREVQTE9ZX1NUQVJURUQnLFxuICAgICAgICAgIGFjdGlvbjogJ2FtcGxpZnknLFxuICAgICAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgbGV2ZWw6ICdyZXN1bHQnLFxuICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXJ0IGRlcGxveW1lbnQgcHJvZ3Jlc3MgZGlzcGxheVxuICAgICAgdGhpcy5jZm5EZXBsb3ltZW50UHJvZ3Jlc3NMb2dnZXIgPSB0aGlzLmdldE5ld0NmbkRlcGxveW1lbnRQcm9ncmVzc0xvZ2dlcihcbiAgICAgICAgdGhpcy5wcmludGVyLFxuICAgICAgKTtcbiAgICAgIHRoaXMucHJpbnRlci5zdGFydFNwaW5uZXIoJ0RlcGxveW1lbnQgaW4gcHJvZ3Jlc3MuLi4nLCB7XG4gICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzMDAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTdG9wIGRlcGxveW1lbnQgcHJvZ3Jlc3MgZGlzcGxheVxuICAgIC8vIDUwMDAgaW5jbHVkZXMgZGVwbG95bWVudCB0aW1lXG4gICAgLy8gNTUwMyBpcyB3aGVuIHRoZSBkZXBsb3ltZW50IGlzIGNvbXBsZXRlZCAobm90IGVtaXR0ZWQgZm9yIHNvbWUgdXBkYXRlcyBidXQgZW1pdHRlZCBmb3IgZGVzdHJveSBhbmQgZmFpbHMpXG4gICAgLy8gNTkwMCBpbmNsdWRlcyB0aGUgc3RhY2sgb3V0cHV0c1xuICAgIC8vIDc5MDAgaXMgd2hlbiB0aGUgc3RhY2sgaXMgZGVzdHJveWVkXG4gICAgaWYgKFxuICAgICAgbXNnLmNvZGUgPT09ICdDREtfVE9PTEtJVF9JNTAwMCcgfHxcbiAgICAgIG1zZy5jb2RlID09PSAnQ0RLX1RPT0xLSVRfSTU1MDMnIHx8XG4gICAgICBtc2cuY29kZSA9PT0gJ0NES19UT09MS0lUX0k1OTAwJyB8fFxuICAgICAgbXNnLmNvZGUgPT09ICdDREtfVE9PTEtJVF9JNzkwMCdcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLmNmbkRlcGxveW1lbnRQcm9ncmVzc0xvZ2dlcikge1xuICAgICAgICB0aGlzLnByaW50ZXIuc3RvcFNwaW5uZXIoKTtcbiAgICAgICAgdGhpcy5jZm5EZXBsb3ltZW50UHJvZ3Jlc3NMb2dnZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ0ZOIERlcGxveW1lbnQgcHJvZ3Jlc3MgZXZlbnRzIGluZm9ybWF0aW9uXG4gICAgaWYgKFxuICAgICAgbXNnLmNvZGUgPT09ICdDREtfVE9PTEtJVF9JNTUwMicgJiZcbiAgICAgIG1zZy5kYXRhICYmXG4gICAgICB0eXBlb2YgbXNnLmRhdGEgPT09ICdvYmplY3QnICYmXG4gICAgICAnZXZlbnQnIGluIG1zZy5kYXRhXG4gICAgKSB7XG4gICAgICBjb25zdCBldmVudCA9IG1zZy5kYXRhIGFzIENmbkRlcGxveW1lbnRTdGFja0V2ZW50O1xuICAgICAgdGhpcy5jZm5EZXBsb3ltZW50UHJvZ3Jlc3NMb2dnZXI/LmFkZEFjdGl2aXR5KGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBDREsgTWFya2VyIHRoYXQgZGVwbG95bWVudCBpcyBzdGlsbCBpbiBwcm9ncmVzcywgd2UgdGFrZSB0aGlzIG9wcG9ydHVuaXR5XG4gICAgLy8gdG8gZGlzcGxheSB0aGUgYWdncmVnYXRlZCBldmVudHNcbiAgICBpZiAoXG4gICAgICBtc2cuY29kZSA9PT0gJ0NES19UT09MS0lUX0kwMDAwJyAmJlxuICAgICAgbXNnLm1lc3NhZ2UuaW5jbHVkZXMoJ2hhcyBhbiBvbmdvaW5nIG9wZXJhdGlvbiBpbiBwcm9ncmVzcycpXG4gICAgKSB7XG4gICAgICBhd2FpdCB0aGlzLmNmbkRlcGxveW1lbnRQcm9ncmVzc0xvZ2dlcj8ucHJpbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBOb24gZmFuY3kgY2ZuIGRlcGxveW1lbnQgcHJvZ3Jlc3MgZm9yIGNpL2NkIG9yIGZpbGVzXG4gICAqL1xuICBub25UdHlDZm5EZXBsb3ltZW50UHJvZ3Jlc3MgPSBhc3luYyA8VD4oXG4gICAgbXNnOiBBbXBsaWZ5SW9Ib3N0RXZlbnRNZXNzYWdlPFQ+LFxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBpZiAobXNnLmNvZGUgPT09ICdDREtfVE9PTEtJVF9JNTEwMCcpIHtcbiAgICAgIGF3YWl0IHRoaXMuYW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeS5nZXRJbnN0YW5jZSgpLm5vdGlmeSh7XG4gICAgICAgIG1lc3NhZ2U6IGBCdWlsdCBhbmQgcHVibGlzaGVkIGFzc2V0c2AsXG4gICAgICAgIGNvZGU6ICdERVBMT1lfU1RBUlRFRCcsXG4gICAgICAgIGFjdGlvbjogJ2FtcGxpZnknLFxuICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICBsZXZlbDogJ3Jlc3VsdCcsXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobXNnLmNvZGUgPT09ICdDREtfVE9PTEtJVF9JNTUwMicpIHtcbiAgICAgIC8vIENES3MgZm9ybWF0dGVkIGNmbiBkZXBsb3ltZW50IHByb2dyZXNzXG4gICAgICB0aGlzLnByaW50ZXIucHJpbnQobXNnLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGdldE5ld0NmbkRlcGxveW1lbnRQcm9ncmVzc0xvZ2dlciA9IChwcmludGVyOiBQcmludGVyKSA9PiB7XG4gICAgY29uc3QgZ2V0QmxvY2tXaWR0aCA9ICgpID0+XG4gICAgICBwcmludGVyLnN0ZG91dCBpbnN0YW5jZW9mIFdyaXRlU3RyZWFtID8gcHJpbnRlci5zdGRvdXQuY29sdW1ucyA6IDYwMDtcbiAgICBjb25zdCBnZXRCbG9ja0hlaWdodCA9ICgpID0+XG4gICAgICBwcmludGVyLnN0ZG91dCBpbnN0YW5jZW9mIFdyaXRlU3RyZWFtID8gcHJpbnRlci5zdGRvdXQucm93cyA6IDEwMDtcbiAgICByZXR1cm4gbmV3IENmbkRlcGxveW1lbnRQcm9ncmVzc0xvZ2dlcih7XG4gICAgICBnZXRCbG9ja1dpZHRoLFxuICAgICAgcmV3cml0YWJsZUJsb2NrOiBuZXcgUmV3cml0YWJsZUJsb2NrKFxuICAgICAgICBnZXRCbG9ja1dpZHRoLFxuICAgICAgICBnZXRCbG9ja0hlaWdodCxcbiAgICAgICAgdGhpcy5hbXBsaWZ5SU9FdmVudHNCcmlkZ2VTaW5nbGV0b25GYWN0b3J5LmdldEluc3RhbmNlKCksXG4gICAgICApLFxuICAgIH0pO1xuICB9O1xuXG4gIHByaXZhdGUgZXh0cmFjdFJlc291cmNlTmFtZUZyb21Ib3RTd2FwTWVzc2FnZSA9IChcbiAgICBkYXRhOiB1bmtub3duLFxuICApOiB7IHJlc291cmNlVHlwZTogc3RyaW5nOyByZXNvdXJjZU5hbWU6IHN0cmluZyB9W10gfCB1bmRlZmluZWQgPT4ge1xuICAgIGlmIChcbiAgICAgIGRhdGEgJiZcbiAgICAgIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ3Jlc291cmNlcycgaW4gZGF0YSAmJlxuICAgICAgQXJyYXkuaXNBcnJheShkYXRhLnJlc291cmNlcylcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhLnJlc291cmNlcy5tYXAoXG4gICAgICAgIChyZXNvdXJjZToge1xuICAgICAgICAgIGxvZ2ljYWxJZDogc3RyaW5nO1xuICAgICAgICAgIHJlc291cmNlVHlwZTogc3RyaW5nO1xuICAgICAgICAgIG1ldGFkYXRhPzogeyBjb25zdHJ1Y3RQYXRoPzogc3RyaW5nIH07XG4gICAgICAgIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzb3VyY2VOYW1lOlxuICAgICAgICAgICAgICByZXNvdXJjZT8ubWV0YWRhdGE/LmNvbnN0cnVjdFBhdGggPz8gcmVzb3VyY2UubG9naWNhbElkLFxuICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiByZXNvdXJjZS5yZXNvdXJjZVR5cGUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgcHJpdmF0ZSBzYWZlSnNvblN0cmluZ2lmeUZvckRlYnVnID0gKGRhdGE6IHVua25vd24pID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuICdGYWlsZWQgdG8gZGVzZXJpYWxpemUgZGF0YSc7XG4gICAgfVxuICB9O1xufVxuIl19