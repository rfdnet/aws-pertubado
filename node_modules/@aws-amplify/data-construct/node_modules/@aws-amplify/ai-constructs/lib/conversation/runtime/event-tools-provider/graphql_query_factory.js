"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQlQueryFactory = void 0;
/**
 * A factory that creates GraphQl queries from tool configuration.
 */
class GraphQlQueryFactory {
    constructor() {
        this.createQuery = (toolDefinition) => {
            const { graphqlRequestInputDescriptor } = toolDefinition;
            const { selectionSet, queryName } = graphqlRequestInputDescriptor;
            const [topLevelQueryArgs, queryArgs] = this.createQueryArgs(toolDefinition);
            const fieldSelection = selectionSet.length > 0 ? ` { ${selectionSet} }` : '';
            const query = `
    query ToolQuery${topLevelQueryArgs} {
      ${queryName}${queryArgs}${fieldSelection}
    }
  `;
            return query;
        };
        this.createQueryArgs = (toolDefinition) => {
            const { inputSchema } = toolDefinition;
            if (!(inputSchema === null || inputSchema === void 0 ? void 0 : inputSchema.json)) {
                return ['', ''];
            }
            const { properties } = inputSchema.json;
            // The conversation resolver should not pass an empty object as input,
            // but we're defensively checking for it here anyway because if `properties: {}`
            // is passed, it will generate invalid GraphQL. e.g.
            // Valid:
            // query ToolQuery {
            //   exampleQuery
            // }
            //
            // Invalid:
            // query ToolQuery {
            //   exampleQuery()
            // }
            if (!properties || Object.keys(properties).length === 0) {
                return ['', ''];
            }
            const { propertyTypes } = toolDefinition.graphqlRequestInputDescriptor;
            const propertyNames = Object.keys(properties);
            const topLevelQueryArgs = propertyNames
                .map((name) => `$${name}: ${propertyTypes[name]}`)
                .join(', ');
            const queryArgs = propertyNames
                .map((name) => `${name}: $${name}`)
                .join(', ');
            return [`(${topLevelQueryArgs})`, `(${queryArgs})`];
        };
    }
}
exports.GraphQlQueryFactory = GraphQlQueryFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9xdWVyeV9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9ydW50aW1lL2V2ZW50LXRvb2xzLXByb3ZpZGVyL2dyYXBocWxfcXVlcnlfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQTs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0lBQWhDO1FBQ0UsZ0JBQVcsR0FBRyxDQUNaLGNBQXNELEVBQzlDLEVBQUU7WUFDVixNQUFNLEVBQUUsNkJBQTZCLEVBQUUsR0FBRyxjQUFjLENBQUM7WUFDekQsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQztZQUNsRSxNQUFNLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RSxNQUFNLGNBQWMsR0FDbEIsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4RCxNQUFNLEtBQUssR0FBRztxQkFDRyxpQkFBaUI7UUFDOUIsU0FBUyxHQUFHLFNBQVMsR0FBRyxjQUFjOztHQUUzQyxDQUFDO1lBRUEsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUM7UUFFTSxvQkFBZSxHQUFHLENBQ3hCLGNBQXNELEVBQ3BDLEVBQUU7WUFDcEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLGNBQWMsQ0FBQztZQUN2QyxJQUFJLENBQUMsQ0FBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsSUFBSSxDQUFBLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDakI7WUFFRCxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsV0FBVyxDQUFDLElBQXVCLENBQUM7WUFFM0Qsc0VBQXNFO1lBQ3RFLGdGQUFnRjtZQUNoRixvREFBb0Q7WUFDcEQsU0FBUztZQUNULG9CQUFvQjtZQUNwQixpQkFBaUI7WUFDakIsSUFBSTtZQUNKLEVBQUU7WUFDRixXQUFXO1lBQ1gsb0JBQW9CO1lBQ3BCLG1CQUFtQjtZQUNuQixJQUFJO1lBQ0osSUFBSSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDakI7WUFDRCxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsY0FBYyxDQUFDLDZCQUE2QixDQUFDO1lBQ3ZFLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFOUMsTUFBTSxpQkFBaUIsR0FBRyxhQUFhO2lCQUNwQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxLQUFLLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2lCQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFZCxNQUFNLFNBQVMsR0FBRyxhQUFhO2lCQUM1QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDO2lCQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFZCxPQUFPLENBQUMsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUF4REQsa0RBd0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udmVyc2F0aW9uVHVybkV2ZW50VG9vbENvbmZpZ3VyYXRpb24gfSBmcm9tICcuL3R5cGVzJztcblxudHlwZSBJbnB1dFNjaGVtYUpzb24gPSB7XG4gIHByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICByZXF1aXJlZDogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgR3JhcGhRbCBxdWVyaWVzIGZyb20gdG9vbCBjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgR3JhcGhRbFF1ZXJ5RmFjdG9yeSB7XG4gIGNyZWF0ZVF1ZXJ5ID0gKFxuICAgIHRvb2xEZWZpbml0aW9uOiBDb252ZXJzYXRpb25UdXJuRXZlbnRUb29sQ29uZmlndXJhdGlvbixcbiAgKTogc3RyaW5nID0+IHtcbiAgICBjb25zdCB7IGdyYXBocWxSZXF1ZXN0SW5wdXREZXNjcmlwdG9yIH0gPSB0b29sRGVmaW5pdGlvbjtcbiAgICBjb25zdCB7IHNlbGVjdGlvblNldCwgcXVlcnlOYW1lIH0gPSBncmFwaHFsUmVxdWVzdElucHV0RGVzY3JpcHRvcjtcbiAgICBjb25zdCBbdG9wTGV2ZWxRdWVyeUFyZ3MsIHF1ZXJ5QXJnc10gPSB0aGlzLmNyZWF0ZVF1ZXJ5QXJncyh0b29sRGVmaW5pdGlvbik7XG4gICAgY29uc3QgZmllbGRTZWxlY3Rpb24gPVxuICAgICAgc2VsZWN0aW9uU2V0Lmxlbmd0aCA+IDAgPyBgIHsgJHtzZWxlY3Rpb25TZXR9IH1gIDogJyc7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgcXVlcnkgVG9vbFF1ZXJ5JHt0b3BMZXZlbFF1ZXJ5QXJnc30ge1xuICAgICAgJHtxdWVyeU5hbWV9JHtxdWVyeUFyZ3N9JHtmaWVsZFNlbGVjdGlvbn1cbiAgICB9XG4gIGA7XG5cbiAgICByZXR1cm4gcXVlcnk7XG4gIH07XG5cbiAgcHJpdmF0ZSBjcmVhdGVRdWVyeUFyZ3MgPSAoXG4gICAgdG9vbERlZmluaXRpb246IENvbnZlcnNhdGlvblR1cm5FdmVudFRvb2xDb25maWd1cmF0aW9uLFxuICApOiBbc3RyaW5nLCBzdHJpbmddID0+IHtcbiAgICBjb25zdCB7IGlucHV0U2NoZW1hIH0gPSB0b29sRGVmaW5pdGlvbjtcbiAgICBpZiAoIWlucHV0U2NoZW1hPy5qc29uKSB7XG4gICAgICByZXR1cm4gWycnLCAnJ107XG4gICAgfVxuXG4gICAgY29uc3QgeyBwcm9wZXJ0aWVzIH0gPSBpbnB1dFNjaGVtYS5qc29uIGFzIElucHV0U2NoZW1hSnNvbjtcblxuICAgIC8vIFRoZSBjb252ZXJzYXRpb24gcmVzb2x2ZXIgc2hvdWxkIG5vdCBwYXNzIGFuIGVtcHR5IG9iamVjdCBhcyBpbnB1dCxcbiAgICAvLyBidXQgd2UncmUgZGVmZW5zaXZlbHkgY2hlY2tpbmcgZm9yIGl0IGhlcmUgYW55d2F5IGJlY2F1c2UgaWYgYHByb3BlcnRpZXM6IHt9YFxuICAgIC8vIGlzIHBhc3NlZCwgaXQgd2lsbCBnZW5lcmF0ZSBpbnZhbGlkIEdyYXBoUUwuIGUuZy5cbiAgICAvLyBWYWxpZDpcbiAgICAvLyBxdWVyeSBUb29sUXVlcnkge1xuICAgIC8vICAgZXhhbXBsZVF1ZXJ5XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gSW52YWxpZDpcbiAgICAvLyBxdWVyeSBUb29sUXVlcnkge1xuICAgIC8vICAgZXhhbXBsZVF1ZXJ5KClcbiAgICAvLyB9XG4gICAgaWYgKCFwcm9wZXJ0aWVzIHx8IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFsnJywgJyddO1xuICAgIH1cbiAgICBjb25zdCB7IHByb3BlcnR5VHlwZXMgfSA9IHRvb2xEZWZpbml0aW9uLmdyYXBocWxSZXF1ZXN0SW5wdXREZXNjcmlwdG9yO1xuICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcblxuICAgIGNvbnN0IHRvcExldmVsUXVlcnlBcmdzID0gcHJvcGVydHlOYW1lc1xuICAgICAgLm1hcCgobmFtZSkgPT4gYCQke25hbWV9OiAke3Byb3BlcnR5VHlwZXNbbmFtZV19YClcbiAgICAgIC5qb2luKCcsICcpO1xuXG4gICAgY29uc3QgcXVlcnlBcmdzID0gcHJvcGVydHlOYW1lc1xuICAgICAgLm1hcCgobmFtZSkgPT4gYCR7bmFtZX06ICQke25hbWV9YClcbiAgICAgIC5qb2luKCcsICcpO1xuXG4gICAgcmV0dXJuIFtgKCR7dG9wTGV2ZWxRdWVyeUFyZ3N9KWAsIGAoJHtxdWVyeUFyZ3N9KWBdO1xuICB9O1xufVxuIl19