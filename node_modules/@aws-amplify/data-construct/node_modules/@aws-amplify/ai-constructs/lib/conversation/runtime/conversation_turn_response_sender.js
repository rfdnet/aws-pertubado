"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationTurnResponseSender = void 0;
const graphql_request_executor_1 = require("./graphql_request_executor");
const user_agent_provider_1 = require("./user_agent_provider");
/**
 * This class is responsible for sending a response produced by Bedrock back to AppSync
 * in a form of mutation.
 */
class ConversationTurnResponseSender {
    /**
     * Creates conversation turn response sender.
     */
    constructor(event, userAgentProvider = new user_agent_provider_1.UserAgentProvider(event), graphqlRequestExecutor = new graphql_request_executor_1.GraphqlRequestExecutor(event.graphqlApiEndpoint, event.request.headers.authorization, userAgentProvider), logger = console) {
        this.event = event;
        this.userAgentProvider = userAgentProvider;
        this.graphqlRequestExecutor = graphqlRequestExecutor;
        this.logger = logger;
        this.sendResponse = async (message) => {
            const responseMutationRequest = this.createMutationRequest(message);
            this.logger.debug('Sending response mutation:', responseMutationRequest);
            await this.graphqlRequestExecutor.executeGraphql(responseMutationRequest, {
                userAgent: this.userAgentProvider.getUserAgent({
                    'turn-response-type': 'single',
                }),
            });
        };
        this.sendResponseChunk = async (chunk) => {
            const responseMutationRequest = this.createStreamingMutationRequest(chunk);
            this.logger.debug('Sending response mutation:', responseMutationRequest);
            await this.graphqlRequestExecutor.executeGraphql(responseMutationRequest, {
                userAgent: this.userAgentProvider.getUserAgent({
                    'turn-response-type': 'streaming',
                }),
            });
        };
        this.sendErrors = async (errors) => {
            const responseMutationRequest = this.createMutationErrorsRequest(errors);
            this.logger.debug('Sending errors response mutation:', responseMutationRequest);
            await this.graphqlRequestExecutor.executeGraphql(responseMutationRequest, {
                userAgent: this.userAgentProvider.getUserAgent({
                    'turn-response-type': 'error',
                }),
            });
        };
        this.createMutationErrorsRequest = (errors) => {
            const query = `
        mutation PublishModelResponse($input: ${this.event.responseMutation.inputTypeName}!) {
            ${this.event.responseMutation.name}(input: $input) {
                ${this.event.responseMutation.selectionSet}
            }
        }
    `;
            const variables = {
                input: {
                    conversationId: this.event.conversationId,
                    errors,
                    associatedUserMessageId: this.event.currentMessageId,
                },
            };
            return { query, variables };
        };
        this.createMutationRequest = (content) => {
            const query = `
        mutation PublishModelResponse($input: ${this.event.responseMutation.inputTypeName}!) {
            ${this.event.responseMutation.name}(input: $input) {
                ${this.event.responseMutation.selectionSet}
            }
        }
    `;
            content = this.serializeContent(content);
            const variables = {
                input: {
                    conversationId: this.event.conversationId,
                    content,
                    associatedUserMessageId: this.event.currentMessageId,
                },
            };
            return { query, variables };
        };
        this.createStreamingMutationRequest = (chunk) => {
            const query = `
        mutation PublishModelResponse($input: ${this.event.responseMutation.inputTypeName}!) {
            ${this.event.responseMutation.name}(input: $input) {
                ${this.event.responseMutation.selectionSet}
            }
        }
    `;
            chunk = {
                ...chunk,
                accumulatedTurnContent: this.serializeContent(chunk.accumulatedTurnContent),
            };
            const variables = {
                input: chunk,
            };
            return { query, variables };
        };
        this.serializeContent = (content) => {
            return content.map((block) => {
                if (block.toolUse) {
                    // The `input` field is typed as `AWS JSON` in the GraphQL API because it can represent
                    // arbitrary JSON values.
                    // We need to stringify it before sending it to AppSync to prevent type errors.
                    const input = JSON.stringify(block.toolUse.input);
                    return { toolUse: { ...block.toolUse, input } };
                }
                return block;
            });
        };
    }
}
exports.ConversationTurnResponseSender = ConversationTurnResponseSender;
//# sourceMappingURL=data:application/json;base64,