"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationTurnEventToolsProvider = void 0;
const graphql_tool_1 = require("./graphql_tool");
const graphql_query_factory_1 = require("./graphql_query_factory");
const user_agent_provider_1 = require("../user_agent_provider");
/**
 * Creates executable tools from definitions in conversation turn event.
 */
class ConversationTurnEventToolsProvider {
    /**
     * Creates conversation turn event tools provider.
     */
    constructor(event, graphQlQueryFactory = new graphql_query_factory_1.GraphQlQueryFactory()) {
        this.event = event;
        this.graphQlQueryFactory = graphQlQueryFactory;
        this.getEventTools = () => {
            var _a;
            const { toolsConfiguration, graphqlApiEndpoint } = this.event;
            if (!toolsConfiguration || !toolsConfiguration.dataTools) {
                return [];
            }
            const tools = (_a = toolsConfiguration.dataTools) === null || _a === void 0 ? void 0 : _a.map((tool) => {
                const { name, description, inputSchema } = tool;
                const query = this.graphQlQueryFactory.createQuery(tool);
                return new graphql_tool_1.GraphQlTool(name, description, inputSchema, graphqlApiEndpoint, query, this.event.request.headers.authorization, new user_agent_provider_1.UserAgentProvider(this.event));
            });
            return tools !== null && tools !== void 0 ? tools : [];
        };
    }
}
exports.ConversationTurnEventToolsProvider = ConversationTurnEventToolsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfdG9vbHNfcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29udmVyc2F0aW9uL3J1bnRpbWUvZXZlbnQtdG9vbHMtcHJvdmlkZXIvZXZlbnRfdG9vbHNfcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsaURBQTZDO0FBQzdDLG1FQUE4RDtBQUM5RCxnRUFBMkQ7QUFFM0Q7O0dBRUc7QUFDSCxNQUFhLGtDQUFrQztJQUM3Qzs7T0FFRztJQUNILFlBQ21CLEtBQTRCLEVBQzVCLHNCQUEyQyxJQUFJLDJDQUFtQixFQUFFO1FBRHBFLFVBQUssR0FBTCxLQUFLLENBQXVCO1FBQzVCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUQ7UUFHdkYsa0JBQWEsR0FBRyxHQUEwQixFQUFFOztZQUMxQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzlELElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRTtnQkFDeEQsT0FBTyxFQUFFLENBQUM7YUFDWDtZQUNELE1BQU0sS0FBSyxHQUFHLE1BQUEsa0JBQWtCLENBQUMsU0FBUywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDdkQsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6RCxPQUFPLElBQUksMEJBQVcsQ0FDcEIsSUFBSSxFQUNKLFdBQVcsRUFDWCxXQUFXLEVBQ1gsa0JBQWtCLEVBQ2xCLEtBQUssRUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUN4QyxJQUFJLHVDQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEMsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDO0lBckJDLENBQUM7Q0FzQkw7QUE3QkQsZ0ZBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udmVyc2F0aW9uVHVybkV2ZW50LCBFeGVjdXRhYmxlVG9vbCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdyYXBoUWxUb29sIH0gZnJvbSAnLi9ncmFwaHFsX3Rvb2wnO1xuaW1wb3J0IHsgR3JhcGhRbFF1ZXJ5RmFjdG9yeSB9IGZyb20gJy4vZ3JhcGhxbF9xdWVyeV9mYWN0b3J5JztcbmltcG9ydCB7IFVzZXJBZ2VudFByb3ZpZGVyIH0gZnJvbSAnLi4vdXNlcl9hZ2VudF9wcm92aWRlcic7XG5cbi8qKlxuICogQ3JlYXRlcyBleGVjdXRhYmxlIHRvb2xzIGZyb20gZGVmaW5pdGlvbnMgaW4gY29udmVyc2F0aW9uIHR1cm4gZXZlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb252ZXJzYXRpb25UdXJuRXZlbnRUb29sc1Byb3ZpZGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgY29udmVyc2F0aW9uIHR1cm4gZXZlbnQgdG9vbHMgcHJvdmlkZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50OiBDb252ZXJzYXRpb25UdXJuRXZlbnQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBncmFwaFFsUXVlcnlGYWN0b3J5OiBHcmFwaFFsUXVlcnlGYWN0b3J5ID0gbmV3IEdyYXBoUWxRdWVyeUZhY3RvcnkoKSxcbiAgKSB7fVxuXG4gIGdldEV2ZW50VG9vbHMgPSAoKTogQXJyYXk8RXhlY3V0YWJsZVRvb2w+ID0+IHtcbiAgICBjb25zdCB7IHRvb2xzQ29uZmlndXJhdGlvbiwgZ3JhcGhxbEFwaUVuZHBvaW50IH0gPSB0aGlzLmV2ZW50O1xuICAgIGlmICghdG9vbHNDb25maWd1cmF0aW9uIHx8ICF0b29sc0NvbmZpZ3VyYXRpb24uZGF0YVRvb2xzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IHRvb2xzID0gdG9vbHNDb25maWd1cmF0aW9uLmRhdGFUb29scz8ubWFwKCh0b29sKSA9PiB7XG4gICAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCBpbnB1dFNjaGVtYSB9ID0gdG9vbDtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5ncmFwaFFsUXVlcnlGYWN0b3J5LmNyZWF0ZVF1ZXJ5KHRvb2wpO1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFsVG9vbChcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIGlucHV0U2NoZW1hLFxuICAgICAgICBncmFwaHFsQXBpRW5kcG9pbnQsXG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICB0aGlzLmV2ZW50LnJlcXVlc3QuaGVhZGVycy5hdXRob3JpemF0aW9uLFxuICAgICAgICBuZXcgVXNlckFnZW50UHJvdmlkZXIodGhpcy5ldmVudCksXG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiB0b29scyA/PyBbXTtcbiAgfTtcbn1cbiJdfQ==