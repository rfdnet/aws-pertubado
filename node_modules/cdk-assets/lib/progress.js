"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventType = void 0;
exports.shellEventToEventType = shellEventToEventType;
exports.shellEventPublisherFromEventEmitter = shellEventPublisherFromEventEmitter;
/**
 * A single event for an asset
 */
var EventType;
(function (EventType) {
    /**
     * Just starting on an asset
     */
    EventType["START"] = "start";
    /**
     * When an asset is successfully finished
     */
    EventType["SUCCESS"] = "success";
    /**
     * When an asset failed
     */
    EventType["FAIL"] = "fail";
    /**
     * Checking whether an asset has already been published
     */
    EventType["CHECK"] = "check";
    /**
     * The asset was already published
     */
    EventType["FOUND"] = "found";
    /**
     * The asset was reused locally from a cached version
     */
    EventType["CACHED"] = "cached";
    /**
     * The asset will be built
     */
    EventType["BUILD"] = "build";
    /**
     * The asset will be uploaded
     */
    EventType["UPLOAD"] = "upload";
    /**
     * Another type of detail message
     */
    EventType["DEBUG"] = "debug";
    /**
     * When a shell command is executed. Emits the the command line arguments given to
     * the subprocess as a string upon shell execution.
     *
     * Only emitted when subprocessOutputDestination is set to 'publish'
     */
    EventType["SHELL_OPEN"] = "shell_open";
    /**
     * stdout from a shell command
     *
     * Only emitted when subprocessOutputDestination is set to 'publish'
     */
    EventType["SHELL_STDOUT"] = "shell_stdout";
    /**
     * stdout from a shell command
     *
     * Only emitted when subprocessOutputDestination is set to 'publish'
     */
    EventType["SHELL_STDERR"] = "shell_stderr";
    /**
     * When a shell command closes. Emits the the command line arguments given to
     * the subprocess as a string upon shell closure.
     *
     * Only emitted when subprocessOutputDestination is set to 'publish'
     */
    EventType["SHELL_CLOSE"] = "shell_close";
})(EventType || (exports.EventType = EventType = {}));
/**
 * A helper function to convert shell events to asset progress events
 * @param event a shell event
 * @returns an {@link EventType}
 */
function shellEventToEventType(event) {
    switch (event) {
        case 'open':
            return EventType.SHELL_OPEN;
        case 'close':
            return EventType.SHELL_CLOSE;
        case 'data_stdout':
            return EventType.SHELL_STDOUT;
        case 'data_stderr':
            return EventType.SHELL_STDERR;
    }
}
/**
 * Create a ShellEventPublisher for an {@link EventEmitter}
 *
 * Returns a ShellEventPublisher that translates ShellEvents into messages
 * emitted via the EventEmitter. Uses `shellEventToEventType` to translate
 * shell event types to event types
 */
function shellEventPublisherFromEventEmitter(eventEmitter) {
    return (event, message) => {
        const eventType = shellEventToEventType(event);
        eventEmitter(eventType, message);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9ncmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFrR0Esc0RBV0M7QUFTRCxrRkFLQztBQTlHRDs7R0FFRztBQUNILElBQVksU0EyRVg7QUEzRUQsV0FBWSxTQUFTO0lBQ25COztPQUVHO0lBQ0gsNEJBQWUsQ0FBQTtJQUVmOztPQUVHO0lBQ0gsZ0NBQW1CLENBQUE7SUFFbkI7O09BRUc7SUFDSCwwQkFBYSxDQUFBO0lBRWI7O09BRUc7SUFDSCw0QkFBZSxDQUFBO0lBRWY7O09BRUc7SUFDSCw0QkFBZSxDQUFBO0lBRWY7O09BRUc7SUFDSCw4QkFBaUIsQ0FBQTtJQUVqQjs7T0FFRztJQUNILDRCQUFlLENBQUE7SUFFZjs7T0FFRztJQUNILDhCQUFpQixDQUFBO0lBRWpCOztPQUVHO0lBQ0gsNEJBQWUsQ0FBQTtJQUVmOzs7OztPQUtHO0lBQ0gsc0NBQXlCLENBQUE7SUFFekI7Ozs7T0FJRztJQUNILDBDQUE2QixDQUFBO0lBRTdCOzs7O09BSUc7SUFDSCwwQ0FBNkIsQ0FBQTtJQUU3Qjs7Ozs7T0FLRztJQUNILHdDQUEyQixDQUFBO0FBQzdCLENBQUMsRUEzRVcsU0FBUyx5QkFBVCxTQUFTLFFBMkVwQjtBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBQyxLQUFxQjtJQUN6RCxRQUFRLEtBQUssRUFBRSxDQUFDO1FBQ2QsS0FBSyxNQUFNO1lBQ1QsT0FBTyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzlCLEtBQUssT0FBTztZQUNWLE9BQU8sU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUMvQixLQUFLLGFBQWE7WUFDaEIsT0FBTyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQ2hDLEtBQUssYUFBYTtZQUNoQixPQUFPLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDbEMsQ0FBQztBQUNILENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixtQ0FBbUMsQ0FBQyxZQUEwQjtJQUM1RSxPQUFPLENBQUMsS0FBcUIsRUFBRSxPQUFlLEVBQUUsRUFBRTtRQUNoRCxNQUFNLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxZQUFZLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IElNYW5pZmVzdEVudHJ5IH0gZnJvbSAnLi9hc3NldC1tYW5pZmVzdCc7XG5pbXBvcnQgdHlwZSB7IFNoZWxsRXZlbnRUeXBlIH0gZnJvbSAnLi9wcml2YXRlL3NoZWxsJztcblxuLyoqXG4gKiBBIGxpc3RlbmVyIGZvciBwcm9ncmVzcyBldmVudHMgZnJvbSB0aGUgcHVibGlzaGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVB1Ymxpc2hQcm9ncmVzc0xpc3RlbmVyIHtcbiAgLyoqXG4gICAqIEFzc2V0IGJ1aWxkIGV2ZW50XG4gICAqL1xuICBvblB1Ymxpc2hFdmVudCh0eXBlOiBFdmVudFR5cGUsIGV2ZW50OiBJUHVibGlzaFByb2dyZXNzKTogdm9pZDtcbn1cblxuLyoqXG4gKiBBIHNpbmdsZSBldmVudCBmb3IgYW4gYXNzZXRcbiAqL1xuZXhwb3J0IGVudW0gRXZlbnRUeXBlIHtcbiAgLyoqXG4gICAqIEp1c3Qgc3RhcnRpbmcgb24gYW4gYXNzZXRcbiAgICovXG4gIFNUQVJUID0gJ3N0YXJ0JyxcblxuICAvKipcbiAgICogV2hlbiBhbiBhc3NldCBpcyBzdWNjZXNzZnVsbHkgZmluaXNoZWRcbiAgICovXG4gIFNVQ0NFU1MgPSAnc3VjY2VzcycsXG5cbiAgLyoqXG4gICAqIFdoZW4gYW4gYXNzZXQgZmFpbGVkXG4gICAqL1xuICBGQUlMID0gJ2ZhaWwnLFxuXG4gIC8qKlxuICAgKiBDaGVja2luZyB3aGV0aGVyIGFuIGFzc2V0IGhhcyBhbHJlYWR5IGJlZW4gcHVibGlzaGVkXG4gICAqL1xuICBDSEVDSyA9ICdjaGVjaycsXG5cbiAgLyoqXG4gICAqIFRoZSBhc3NldCB3YXMgYWxyZWFkeSBwdWJsaXNoZWRcbiAgICovXG4gIEZPVU5EID0gJ2ZvdW5kJyxcblxuICAvKipcbiAgICogVGhlIGFzc2V0IHdhcyByZXVzZWQgbG9jYWxseSBmcm9tIGEgY2FjaGVkIHZlcnNpb25cbiAgICovXG4gIENBQ0hFRCA9ICdjYWNoZWQnLFxuXG4gIC8qKlxuICAgKiBUaGUgYXNzZXQgd2lsbCBiZSBidWlsdFxuICAgKi9cbiAgQlVJTEQgPSAnYnVpbGQnLFxuXG4gIC8qKlxuICAgKiBUaGUgYXNzZXQgd2lsbCBiZSB1cGxvYWRlZFxuICAgKi9cbiAgVVBMT0FEID0gJ3VwbG9hZCcsXG5cbiAgLyoqXG4gICAqIEFub3RoZXIgdHlwZSBvZiBkZXRhaWwgbWVzc2FnZVxuICAgKi9cbiAgREVCVUcgPSAnZGVidWcnLFxuXG4gIC8qKlxuICAgKiBXaGVuIGEgc2hlbGwgY29tbWFuZCBpcyBleGVjdXRlZC4gRW1pdHMgdGhlIHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzIGdpdmVuIHRvXG4gICAqIHRoZSBzdWJwcm9jZXNzIGFzIGEgc3RyaW5nIHVwb24gc2hlbGwgZXhlY3V0aW9uLlxuICAgKlxuICAgKiBPbmx5IGVtaXR0ZWQgd2hlbiBzdWJwcm9jZXNzT3V0cHV0RGVzdGluYXRpb24gaXMgc2V0IHRvICdwdWJsaXNoJ1xuICAgKi9cbiAgU0hFTExfT1BFTiA9ICdzaGVsbF9vcGVuJyxcblxuICAvKipcbiAgICogc3Rkb3V0IGZyb20gYSBzaGVsbCBjb21tYW5kXG4gICAqXG4gICAqIE9ubHkgZW1pdHRlZCB3aGVuIHN1YnByb2Nlc3NPdXRwdXREZXN0aW5hdGlvbiBpcyBzZXQgdG8gJ3B1Ymxpc2gnXG4gICAqL1xuICBTSEVMTF9TVERPVVQgPSAnc2hlbGxfc3Rkb3V0JyxcblxuICAvKipcbiAgICogc3Rkb3V0IGZyb20gYSBzaGVsbCBjb21tYW5kXG4gICAqXG4gICAqIE9ubHkgZW1pdHRlZCB3aGVuIHN1YnByb2Nlc3NPdXRwdXREZXN0aW5hdGlvbiBpcyBzZXQgdG8gJ3B1Ymxpc2gnXG4gICAqL1xuICBTSEVMTF9TVERFUlIgPSAnc2hlbGxfc3RkZXJyJyxcblxuICAvKipcbiAgICogV2hlbiBhIHNoZWxsIGNvbW1hbmQgY2xvc2VzLiBFbWl0cyB0aGUgdGhlIGNvbW1hbmQgbGluZSBhcmd1bWVudHMgZ2l2ZW4gdG9cbiAgICogdGhlIHN1YnByb2Nlc3MgYXMgYSBzdHJpbmcgdXBvbiBzaGVsbCBjbG9zdXJlLlxuICAgKlxuICAgKiBPbmx5IGVtaXR0ZWQgd2hlbiBzdWJwcm9jZXNzT3V0cHV0RGVzdGluYXRpb24gaXMgc2V0IHRvICdwdWJsaXNoJ1xuICAgKi9cbiAgU0hFTExfQ0xPU0UgPSAnc2hlbGxfY2xvc2UnLFxufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgc2hlbGwgZXZlbnRzIHRvIGFzc2V0IHByb2dyZXNzIGV2ZW50c1xuICogQHBhcmFtIGV2ZW50IGEgc2hlbGwgZXZlbnRcbiAqIEByZXR1cm5zIGFuIHtAbGluayBFdmVudFR5cGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGVsbEV2ZW50VG9FdmVudFR5cGUoZXZlbnQ6IFNoZWxsRXZlbnRUeXBlKTogRXZlbnRUeXBlIHtcbiAgc3dpdGNoIChldmVudCkge1xuICAgIGNhc2UgJ29wZW4nOlxuICAgICAgcmV0dXJuIEV2ZW50VHlwZS5TSEVMTF9PUEVOO1xuICAgIGNhc2UgJ2Nsb3NlJzpcbiAgICAgIHJldHVybiBFdmVudFR5cGUuU0hFTExfQ0xPU0U7XG4gICAgY2FzZSAnZGF0YV9zdGRvdXQnOlxuICAgICAgcmV0dXJuIEV2ZW50VHlwZS5TSEVMTF9TVERPVVQ7XG4gICAgY2FzZSAnZGF0YV9zdGRlcnInOlxuICAgICAgcmV0dXJuIEV2ZW50VHlwZS5TSEVMTF9TVERFUlI7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBTaGVsbEV2ZW50UHVibGlzaGVyIGZvciBhbiB7QGxpbmsgRXZlbnRFbWl0dGVyfVxuICpcbiAqIFJldHVybnMgYSBTaGVsbEV2ZW50UHVibGlzaGVyIHRoYXQgdHJhbnNsYXRlcyBTaGVsbEV2ZW50cyBpbnRvIG1lc3NhZ2VzXG4gKiBlbWl0dGVkIHZpYSB0aGUgRXZlbnRFbWl0dGVyLiBVc2VzIGBzaGVsbEV2ZW50VG9FdmVudFR5cGVgIHRvIHRyYW5zbGF0ZVxuICogc2hlbGwgZXZlbnQgdHlwZXMgdG8gZXZlbnQgdHlwZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoZWxsRXZlbnRQdWJsaXNoZXJGcm9tRXZlbnRFbWl0dGVyKGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyKSB7XG4gIHJldHVybiAoZXZlbnQ6IFNoZWxsRXZlbnRUeXBlLCBtZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBzaGVsbEV2ZW50VG9FdmVudFR5cGUoZXZlbnQpO1xuICAgIGV2ZW50RW1pdHRlcihldmVudFR5cGUsIG1lc3NhZ2UpO1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBFdmVudEVtaXR0ZXIgPSAodHlwZTogRXZlbnRUeXBlLCBtOiBzdHJpbmcpID0+IHZvaWQ7XG5cbi8qKlxuICogQ29udGV4dCBvYmplY3QgZm9yIHB1Ymxpc2hpbmcgcHJvZ3Jlc3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUHVibGlzaFByb2dyZXNzIHtcbiAgLyoqXG4gICAqIEN1cnJlbnQgZXZlbnQgbWVzc2FnZVxuICAgKi9cbiAgcmVhZG9ubHkgbWVzc2FnZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBc3NldCBjdXJyZW50bHkgYmVpbmcgcGFja2FnZWQgKGlmIGFueSlcbiAgICovXG4gIHJlYWRvbmx5IGN1cnJlbnRBc3NldD86IElNYW5pZmVzdEVudHJ5O1xuXG4gIC8qKlxuICAgKiBIb3cgZmFyIGFsb25nIGFyZSB3ZT9cbiAgICovXG4gIHJlYWRvbmx5IHBlcmNlbnRDb21wbGV0ZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBYm9ydCB0aGUgY3VycmVudCBwdWJsaXNoaW5nIG9wZXJhdGlvblxuICAgKi9cbiAgYWJvcnQoKTogdm9pZDtcbn1cbiJdfQ==