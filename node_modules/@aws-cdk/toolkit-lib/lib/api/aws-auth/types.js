"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCredentials = void 0;
const shared_private_1 = require("../shared-private");
class BaseCredentials {
    /**
     * Use no base credentials
     *
     * There will be no current account and no current region during synthesis. To
     * successfully deploy with this set of base credentials:
     *
     * - The CDK app must provide concrete accounts and regions during synthesis
     * - Credential plugins must be installed to provide credentials for those
     *   accounts.
     */
    static none() {
        return new class extends BaseCredentials {
            async makeSdkConfig() {
                return {
                    credentialProvider: () => {
                        // eslint-disable-next-line @cdklabs/no-throw-default-error
                        throw new Error('No credentials available due to BaseCredentials.none()');
                    },
                };
            }
            toString() {
                return 'BaseCredentials.none()';
            }
        };
    }
    /**
     * Obtain base credentials and base region the same way the AWS CLI would
     *
     * Credentials and region will be read from the environment first, falling back
     * to INI files or other sources if available.
     *
     * The profile name is configurable.
     */
    static awsCliCompatible(options = {}) {
        return new class extends BaseCredentials {
            makeSdkConfig(services) {
                const awsCli = new shared_private_1.AwsCliCompatible(services.ioHelper, services.requestHandler ?? {}, services.logger);
                return awsCli.baseConfig(options.profile);
            }
            toString() {
                return `BaseCredentials.awsCliCompatible(${JSON.stringify(options)})`;
            }
        };
    }
    /**
     * Use a custom SDK identity provider for the base credentials
     *
     * If your provider uses STS calls to obtain base credentials, you must make
     * sure to also configure the necessary HTTP options (like proxy and user
     * agent) and the region on the STS client directly; the toolkit code cannot
     * do this for you.
     */
    static custom(options) {
        return new class extends BaseCredentials {
            makeSdkConfig() {
                return Promise.resolve({
                    credentialProvider: options.provider,
                    defaultRegion: options.region,
                });
            }
            toString() {
                return `BaseCredentials.custom(${JSON.stringify({
                    ...options,
                    provider: '...',
                })})`;
            }
        };
    }
}
exports.BaseCredentials = BaseCredentials;
//# sourceMappingURL=data:application/json;base64,