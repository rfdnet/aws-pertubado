"use strict";
var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;
};
var __disposeResources = (this && this.__disposeResources) || (function (SuppressedError) {
    return function (env) {
        function fail(e) {
            env.error = env.hasError ? new SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        var r, s = 0;
        function next() {
            while (r = env.stack.pop()) {
                try {
                    if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                    if (r.dispose) {
                        var result = r.dispose.call(r.value);
                        if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                    }
                    else s |= 1;
                }
                catch (e) {
                    fail(e);
                }
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
        }
        return next();
    };
})(typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudAssemblySourceBuilder = void 0;
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const context_aware_source_1 = require("./context-aware-source");
const exec_1 = require("./exec");
const prepare_source_1 = require("./prepare-source");
const private_1 = require("../../io/private");
const shared_private_1 = require("../../shared-private");
const shared_public_1 = require("../../shared-public");
const readable_assembly_1 = require("./readable-assembly");
class CloudAssemblySourceBuilder {
    /**
     * Create a Cloud Assembly from a Cloud Assembly builder function.
     *
     * A temporary output directory will be created if no output directory is
     * explicitly given. This directory will be cleaned up if synthesis fails, or
     * when the Cloud Assembly produced by this source is disposed.
     *
     * A write lock will be acquired on the output directory for the duration of
     * the CDK app synthesis (which means that no two apps can synthesize at the
     * same time), and after synthesis a read lock will be acquired on the
     * directory. This means that while the CloudAssembly is being used, no CDK
     * app synthesis can take place into that directory.
     *
     * @param builder the builder function
     * @param props additional configuration properties
     * @returns the CloudAssembly source
     */
    async fromAssemblyBuilder(builder, props = {}) {
        const services = await this.sourceBuilderServices();
        const context = new shared_private_1.Context({ bag: new shared_private_1.Settings(props.context ?? {}) });
        const contextAssemblyProps = {
            services,
            context,
            lookups: props.lookups,
        };
        return new context_aware_source_1.ContextAwareCloudAssemblySource({
            produce: async () => {
                const env_1 = { stack: [], error: void 0, hasError: false };
                try {
                    const execution = __addDisposableResource(env_1, await prepare_source_1.ExecutionEnvironment.create(services, { outdir: props.outdir }), true);
                    const env = await execution.defaultEnvVars();
                    const assembly = await execution.changeDir(async () => execution.withContext(context.all, env, props.synthOptions ?? {}, async (envWithContext, ctx) => execution.withEnv(envWithContext, async () => {
                        try {
                            return await builder({
                                outdir: execution.outdir,
                                context: ctx,
                            });
                        }
                        catch (error) {
                            // re-throw toolkit errors unchanged
                            if (shared_public_1.ToolkitError.isToolkitError(error)) {
                                throw error;
                            }
                            // otherwise, wrap into an assembly error
                            throw shared_public_1.AssemblyError.withCause('Assembly builder failed', error);
                        }
                    })), props.workingDirectory);
                    // Convert what we got to the definitely correct type we're expecting, a cxapi.CloudAssembly
                    const asm = cxapi.CloudAssembly.isCloudAssembly(assembly)
                        ? assembly
                        : await (0, prepare_source_1.assemblyFromDirectory)(assembly.directory, services.ioHelper, props.loadAssemblyOptions);
                    const success = await execution.markSuccessful();
                    return new readable_assembly_1.ReadableCloudAssembly(asm, success.readLock, { deleteOnDispose: execution.outDirIsTemporary });
                }
                catch (e_1) {
                    env_1.error = e_1;
                    env_1.hasError = true;
                }
                finally {
                    const result_1 = __disposeResources(env_1);
                    if (result_1)
                        await result_1;
                }
            },
        }, contextAssemblyProps);
    }
    /**
     * Creates a Cloud Assembly from an existing assembly directory.
     *
     * A read lock will be acquired for the directory. This means that while
     * the CloudAssembly is being used, no CDK app synthesis can take place into
     * that directory.
     *
     * @param directory the directory of a already produced Cloud Assembly.
     * @returns the CloudAssembly source
     */
    async fromAssemblyDirectory(directory, props = {}) {
        const services = await this.sourceBuilderServices();
        const contextAssemblyProps = {
            services,
            context: new shared_private_1.Context(), // @todo there is probably a difference between contextaware and contextlookup sources
            lookups: false,
        };
        return new context_aware_source_1.ContextAwareCloudAssemblySource({
            produce: async () => {
                // @todo build
                await services.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_I0150.msg('--app points to a cloud assembly, so we bypass synth'));
                const readLock = await new shared_private_1.RWLock(directory).acquireRead();
                try {
                    const asm = await (0, prepare_source_1.assemblyFromDirectory)(directory, services.ioHelper, props.loadAssemblyOptions);
                    return new readable_assembly_1.ReadableCloudAssembly(asm, readLock, { deleteOnDispose: false });
                }
                catch (e) {
                    await readLock.release();
                    throw e;
                }
            },
        }, contextAssemblyProps);
    }
    /**
     * Use a directory containing an AWS CDK app as source.
     *
     * A temporary output directory will be created if no output directory is
     * explicitly given. This directory will be cleaned up if synthesis fails, or
     * when the Cloud Assembly produced by this source is disposed.
     *
     * A write lock will be acquired on the output directory for the duration of
     * the CDK app synthesis (which means that no two apps can synthesize at the
     * same time), and after synthesis a read lock will be acquired on the
     * directory.  This means that while the CloudAssembly is being used, no CDK
     * app synthesis can take place into that directory.
     *
     * @param props additional configuration properties
     * @returns the CloudAssembly source
     */
    async fromCdkApp(app, props = {}) {
        const services = await this.sourceBuilderServices();
        // @todo this definitely needs to read files from the CWD
        const context = new shared_private_1.Context({ bag: new shared_private_1.Settings(props.context ?? {}) });
        const contextAssemblyProps = {
            services,
            context,
            lookups: props.lookups,
        };
        return new context_aware_source_1.ContextAwareCloudAssemblySource({
            produce: async () => {
                const env_2 = { stack: [], error: void 0, hasError: false };
                try {
                    // @todo build
                    // const build = this.props.configuration.settings.get(['build']);
                    // if (build) {
                    //   await execInChildProcess(build, { cwd: props.workingDirectory });
                    // }
                    const outdir = props.outdir ?? 'cdk.out';
                    try {
                        fs.mkdirpSync(outdir);
                    }
                    catch (e) {
                        throw new shared_public_1.ToolkitError(`Could not create output directory at '${outdir}' (${e.message}).`);
                    }
                    const execution = __addDisposableResource(env_2, await prepare_source_1.ExecutionEnvironment.create(services, { outdir }), true);
                    const commandLine = await execution.guessExecutable(app);
                    const env = await execution.defaultEnvVars();
                    return await execution.withContext(context.all, env, props.synthOptions, async (envWithContext, _ctx) => {
                        await (0, exec_1.execInChildProcess)(commandLine.join(' '), {
                            eventPublisher: async (type, line) => {
                                switch (type) {
                                    case 'data_stdout':
                                        await services.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_I1001.msg(line));
                                        break;
                                    case 'data_stderr':
                                        await services.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_E1002.msg(line));
                                        break;
                                }
                            },
                            extraEnv: envWithContext,
                            cwd: props.workingDirectory,
                        });
                        const asm = await (0, prepare_source_1.assemblyFromDirectory)(outdir, services.ioHelper, props.loadAssemblyOptions);
                        const success = await execution.markSuccessful();
                        return new readable_assembly_1.ReadableCloudAssembly(asm, success.readLock, { deleteOnDispose: execution.outDirIsTemporary });
                    });
                }
                catch (e_2) {
                    env_2.error = e_2;
                    env_2.hasError = true;
                }
                finally {
                    const result_2 = __disposeResources(env_2);
                    if (result_2)
                        await result_2;
                }
            },
        }, contextAssemblyProps);
    }
}
exports.CloudAssemblySourceBuilder = CloudAssemblySourceBuilder;
//# sourceMappingURL=data:application/json;base64,