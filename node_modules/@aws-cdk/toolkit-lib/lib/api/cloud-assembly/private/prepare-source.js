"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionEnvironment = void 0;
exports.assemblyFromDirectory = assemblyFromDirectory;
require("../../../private/dispose-polyfill");
const os = require("node:os");
const path = require("node:path");
const node_util_1 = require("node:util");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const semver_1 = require("semver");
const shared_private_1 = require("../../../api/shared-private");
const shared_private_2 = require("../../../api/shared-private");
const util_1 = require("../../../private/util");
const private_1 = require("../../io/private");
const shared_public_1 = require("../../shared-public");
class ExecutionEnvironment {
    outdir;
    outDirIsTemporary;
    /**
     * Create an ExecutionEnvironment
     *
     * An ExecutionEnvironment holds a writer lock on the given directory which will
     * be cleaned up when the object is disposed.
     *
     * A temporary directory will be created if none is supplied, which will be cleaned
     * up when this object is disposed.
     *
     * If `markSuccessful()` is called, the writer lock is converted to a reader lock
     * and temporary directories will not be cleaned up anymore.
     */
    static async create(services, props = {}) {
        let tempDir = false;
        let dir = props.outdir;
        if (!dir) {
            tempDir = true;
            dir = fs.mkdtempSync(path.join(fs.realpathSync(os.tmpdir()), 'cdk.out'));
        }
        const lock = await new shared_private_1.RWLock(dir).acquireWrite();
        return new ExecutionEnvironment(services, dir, tempDir, lock);
    }
    ioHelper;
    sdkProvider;
    debugFn;
    lock;
    shouldClean;
    constructor(services, outdir, outDirIsTemporary, lock) {
        this.outdir = outdir;
        this.outDirIsTemporary = outDirIsTemporary;
        this.ioHelper = services.ioHelper;
        this.sdkProvider = services.sdkProvider;
        this.debugFn = (msg) => this.ioHelper.notify(private_1.IO.DEFAULT_ASSEMBLY_DEBUG.msg(msg));
        this.lock = lock;
        this.shouldClean = outDirIsTemporary;
    }
    async [Symbol.asyncDispose]() {
        await this.lock?.release();
        if (this.shouldClean) {
            await fs.rm(this.outdir, { recursive: true, force: true });
        }
    }
    /**
     * Mark the execution as successful, which stops the writer lock from being released upon disposal
     */
    async markSuccessful() {
        if (!this.lock) {
            throw new TypeError('Cannot mark successful more than once');
        }
        const readLock = await this.lock.convertToReaderLock();
        this.lock = undefined;
        this.shouldClean = false;
        return { readLock };
    }
    /**
     * Begin an execution in this environment
     *
     * This will acquire a write lock on the given environment. The write lock
     * will be released automatically when the return object is disposed, unless it
     * is converted to a reader lock.
     */
    async beginExecution() {
        const lock = await new shared_private_1.RWLock(this.outdir).acquireWrite();
        let converted = false;
        return {
            async writeToReadLock() {
                converted = true;
                return lock.convertToReaderLock();
            },
            [Symbol.asyncDispose]: async () => {
                // Release if not converted
                if (!converted) {
                    await lock.release();
                }
            },
        };
    }
    /**
     * Guess the executable from the command-line argument
     *
     * Only do this if the file is NOT marked as executable. If it is,
     * we'll defer to the shebang inside the file itself.
     *
     * If we're on Windows, we ALWAYS take the handler, since it's hard to
     * verify if registry associations have or have not been set up for this
     * file type, so we'll assume the worst and take control.
     */
    guessExecutable(app) {
        return (0, shared_private_2.guessExecutable)(app, this.debugFn);
    }
    /**
     * If we don't have region/account defined in context, we fall back to the default SDK behavior
     * where region is retrieved from ~/.aws/config and account is based on default credentials provider
     * chain and then STS is queried.
     *
     * This is done opportunistically: for example, if we can't access STS for some reason or the region
     * is not configured, the context value will be 'null' and there could failures down the line. In
     * some cases, synthesis does not require region/account information at all, so that might be perfectly
     * fine in certain scenarios.
     */
    async defaultEnvVars() {
        const debugFn = (msg) => this.ioHelper.notify(private_1.IO.CDK_ASSEMBLY_I0010.msg(msg));
        const env = await (0, shared_private_2.prepareDefaultEnvironment)(this.sdkProvider, debugFn);
        env[cxapi.OUTDIR_ENV] = this.outdir;
        await debugFn((0, node_util_1.format)('outdir:', this.outdir));
        // CLI version information
        env[cxapi.CLI_ASM_VERSION_ENV] = cxschema.Manifest.version();
        env[cxapi.CLI_VERSION_ENV] = (0, util_1.versionNumber)();
        await debugFn((0, node_util_1.format)('env:', env));
        return env;
    }
    /**
     * Run code from a different working directory
     */
    async changeDir(block, workingDir) {
        const originalWorkingDir = process.cwd();
        try {
            if (workingDir) {
                process.chdir(workingDir);
            }
            return await block();
        }
        finally {
            if (workingDir) {
                process.chdir(originalWorkingDir);
            }
        }
    }
    /**
     * Run code with additional environment variables
     */
    async withEnv(env = {}, block) {
        const originalEnv = process.env;
        try {
            process.env = {
                ...originalEnv,
                ...env,
            };
            return await block();
        }
        finally {
            process.env = originalEnv;
        }
    }
    /**
     * Run code with context setup inside the environment
     */
    async withContext(inputContext, env, synthOpts = {}, block) {
        const context = await (0, shared_private_2.prepareContext)(synthOptsDefaults(synthOpts), inputContext, env, this.debugFn);
        let contextOverflowLocation = null;
        try {
            const envVariableSizeLimit = os.platform() === 'win32' ? 32760 : 131072;
            const [smallContext, overflow] = (0, util_1.splitBySize)(context, (0, shared_private_2.spaceAvailableForContext)(env, envVariableSizeLimit));
            // Store the safe part in the environment variable
            env[cxapi.CONTEXT_ENV] = JSON.stringify(smallContext);
            // If there was any overflow, write it to a temporary file
            if (Object.keys(overflow ?? {}).length > 0) {
                const contextDir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk-context'));
                contextOverflowLocation = path.join(contextDir, 'context-overflow.json');
                fs.writeJSONSync(contextOverflowLocation, overflow);
                env[cxapi.CONTEXT_OVERFLOW_LOCATION_ENV] = contextOverflowLocation;
            }
            // call the block code with new environment
            return await block(env, context);
        }
        finally {
            if (contextOverflowLocation) {
                fs.removeSync(path.dirname(contextOverflowLocation));
            }
        }
    }
}
exports.ExecutionEnvironment = ExecutionEnvironment;
/**
 * Checks if a given assembly supports context overflow, warn otherwise.
 *
 * @param assembly the assembly to check
 */
async function checkContextOverflowSupport(assembly, ioHelper) {
    const traceFn = (msg) => ioHelper.notify(private_1.IO.DEFAULT_ASSEMBLY_TRACE.msg(msg));
    const tree = await (0, shared_private_1.loadTree)(assembly, traceFn);
    const frameworkDoesNotSupportContextOverflow = (0, shared_private_1.some)(tree, node => {
        const fqn = node.constructInfo?.fqn;
        const version = node.constructInfo?.version;
        return (fqn === 'aws-cdk-lib.App' && version != null && (0, semver_1.lte)(version, '2.38.0')) // v2
            || fqn === '@aws-cdk/core.App'; // v1
    });
    // We're dealing with an old version of the framework here. It is unaware of the temporary
    // file, which means that it will ignore the context overflow.
    if (frameworkDoesNotSupportContextOverflow) {
        await ioHelper.notify(private_1.IO.CDK_ASSEMBLY_W0010.msg('Part of the context could not be sent to the application. Please update the AWS CDK library to the latest version.'));
    }
}
/**
 * Safely create an assembly from a cloud assembly directory
 */
async function assemblyFromDirectory(assemblyDir, ioHelper, loadOptions = {}) {
    try {
        const assembly = new cxapi.CloudAssembly(assemblyDir, {
            skipVersionCheck: !(loadOptions.checkVersion ?? true),
            skipEnumCheck: !(loadOptions.checkEnums ?? true),
            // We sort as we deploy
            topoSort: false,
        });
        await checkContextOverflowSupport(assembly, ioHelper);
        return assembly;
    }
    catch (err) {
        if (err.message.includes(cxschema.VERSION_MISMATCH)) {
            // this means the CLI version is too old.
            // we instruct the user to upgrade.
            const message = 'This AWS CDK Toolkit is not compatible with the AWS CDK library used by your application. Please upgrade to the latest version.';
            await ioHelper.notify(private_1.IO.CDK_ASSEMBLY_E1111.msg(message, { error: err }));
            throw new shared_public_1.ToolkitError(`${message}\n(${err.message}`);
        }
        throw err;
    }
}
function synthOptsDefaults(synthOpts = {}) {
    return new shared_private_1.Settings({
        debug: false,
        pathMetadata: true,
        versionReporting: true,
        assetMetadata: true,
        assetStaging: true,
        ...synthOpts,
    }, true);
}
//# sourceMappingURL=data:application/json;base64,