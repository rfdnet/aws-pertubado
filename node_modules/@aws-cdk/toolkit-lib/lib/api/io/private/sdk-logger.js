"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asSdkLogger = asSdkLogger;
const util_1 = require("util");
const util_2 = require("../../../private/util");
const shared_private_1 = require("../../shared-private");
function asSdkLogger(ioHost) {
    return new class {
        // This is too much detail for our logs
        trace(..._content) {
        }
        debug(..._content) {
        }
        /**
         * Info is called mostly (exclusively?) for successful API calls
         *
         * Payload:
         *
         * (Note the input contains entire CFN templates, for example)
         *
         * ```
         * {
         *   clientName: 'S3Client',
         *   commandName: 'GetBucketLocationCommand',
         *   input: {
         *     Bucket: '.....',
         *     ExpectedBucketOwner: undefined
         *   },
         *   output: { LocationConstraint: 'eu-central-1' },
         *   metadata: {
         *     httpStatusCode: 200,
         *     requestId: '....',
         *     extendedRequestId: '...',
         *     cfId: undefined,
         *     attempts: 1,
         *     totalRetryDelay: 0
         *   }
         * }
         * ```
         */
        info(...content) {
            void ioHost.notify(shared_private_1.IO.CDK_SDK_I0100.msg(`[sdk info] ${formatSdkLoggerContent(content)}`, {
                sdkLevel: 'info',
                content,
            }));
        }
        warn(...content) {
            void ioHost.notify(shared_private_1.IO.CDK_SDK_I0100.msg(`[sdk warn] ${formatSdkLoggerContent(content)}`, {
                sdkLevel: 'warn',
                content,
            }));
        }
        /**
         * Error is called mostly (exclusively?) for failing API calls
         *
         * Payload (input would be the entire API call arguments).
         *
         * ```
         * {
         *   clientName: 'STSClient',
         *   commandName: 'GetCallerIdentityCommand',
         *   input: {},
         *   error: AggregateError [ECONNREFUSED]:
         *       at internalConnectMultiple (node:net:1121:18)
         *       at afterConnectMultiple (node:net:1688:7) {
         *     code: 'ECONNREFUSED',
         *     '$metadata': { attempts: 3, totalRetryDelay: 600 },
         *     [errors]: [ [Error], [Error] ]
         *   },
         *   metadata: { attempts: 3, totalRetryDelay: 600 }
         * }
         * ```
         */
        error(...content) {
            void ioHost.notify(shared_private_1.IO.CDK_SDK_I0100.msg(`[sdk error] ${formatSdkLoggerContent(content)}`, {
                sdkLevel: 'error',
                content,
            }));
        }
    };
}
/**
 * This can be anything.
 *
 * For debug, it seems to be mostly strings.
 * For info, it seems to be objects.
 *
 * Stringify and join without separator.
 */
function formatSdkLoggerContent(content) {
    if (content.length === 1) {
        const apiFmt = formatApiCall(content[0]);
        if (apiFmt) {
            return apiFmt;
        }
    }
    return content.map((x) => typeof x === 'string' ? x : (0, util_1.inspect)(x)).join('');
}
function formatApiCall(content) {
    if (!isSdkApiCallSuccess(content) && !isSdkApiCallError(content)) {
        return undefined;
    }
    const service = content.clientName.replace(/Client$/, '');
    const api = content.commandName.replace(/Command$/, '');
    const parts = [];
    if ((content.metadata?.attempts ?? 0) > 1) {
        parts.push(`[${content.metadata?.attempts} attempts, ${content.metadata?.totalRetryDelay}ms retry]`);
    }
    parts.push(`${service}.${api}(${JSON.stringify(content.input, util_2.replacerBufferWithInfo)})`);
    if (isSdkApiCallSuccess(content)) {
        parts.push('-> OK');
    }
    else {
        parts.push(`-> ${content.error}`);
    }
    return parts.join(' ');
}
function isSdkApiCallSuccess(x) {
    return x && typeof x === 'object' && x.commandName && x.output;
}
function isSdkApiCallError(x) {
    return x && typeof x === 'object' && x.commandName && x.error;
}
//# sourceMappingURL=data:application/json;base64,