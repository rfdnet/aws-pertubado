"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildParameterMap = buildParameterMap;
exports.removePublishedAssetsFromWorkGraph = removePublishedAssetsFromWorkGraph;
exports.createHotswapPropertyOverrides = createHotswapPropertyOverrides;
const shared_private_1 = require("../../../api/shared-private");
function buildParameterMap(parameters) {
    const parameterMap = {};
    parameterMap['*'] = {};
    const entries = parameters?.entries() ?? [];
    for (const [key, value] of entries) {
        const [stack, parameter] = key.split(':', 2);
        if (!parameter) {
            parameterMap['*'][stack] = value;
        }
        else {
            if (!parameterMap[stack]) {
                parameterMap[stack] = {};
            }
            parameterMap[stack][parameter] = value;
        }
    }
    return parameterMap;
}
/**
 * Remove the asset publishing and building from the work graph for assets that are already in place
 */
async function removePublishedAssetsFromWorkGraph(graph, deployments, options) {
    await graph.removeUnnecessaryAssets(assetNode => deployments.isSingleAssetPublished(assetNode.assetManifest, assetNode.asset, {
        stack: assetNode.parentStack,
        roleArn: options.roleArn,
        stackName: assetNode.parentStack.stackName,
    }));
}
/**
 * Create the HotswapPropertyOverrides class out of the Interface exposed to users
 */
function createHotswapPropertyOverrides(hotswapProperties) {
    return new shared_private_1.HotswapPropertyOverrides(new shared_private_1.EcsHotswapProperties(hotswapProperties.ecs.minimumHealthyPercent, hotswapProperties.ecs.maximumHealthyPercent));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSw4Q0FvQkM7QUFLRCxnRkFNQztBQUtELHdFQUtDO0FBNUNELGdFQUE2RjtBQUc3RixTQUFnQixpQkFBaUIsQ0FBQyxVQUE0QztJQUM1RSxNQUFNLFlBQVksR0FFZCxFQUFFLENBQUM7SUFDUCxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRXZCLE1BQU0sT0FBTyxHQUFHLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDNUMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFpQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbkMsQ0FBQzthQUFNLENBQUM7WUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3pCLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDM0IsQ0FBQztZQUNELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDekMsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBRUQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUsa0NBQWtDLENBQUMsS0FBZ0IsRUFBRSxXQUF3QixFQUFFLE9BQXNCO0lBQ3pILE1BQU0sS0FBSyxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRTtRQUM1SCxLQUFLLEVBQUUsU0FBUyxDQUFDLFdBQVc7UUFDNUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3hCLFNBQVMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVM7S0FDM0MsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQiw4QkFBOEIsQ0FBQyxpQkFBb0M7SUFDakYsT0FBTyxJQUFJLHlDQUF3QixDQUFDLElBQUkscUNBQW9CLENBQzFELGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFDM0MsaUJBQWlCLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUM1QyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEZXBsb3lPcHRpb25zLCBIb3Rzd2FwUHJvcGVydGllcyB9IGZyb20gJy4uJztcbmltcG9ydCB7IEVjc0hvdHN3YXBQcm9wZXJ0aWVzLCBIb3Rzd2FwUHJvcGVydHlPdmVycmlkZXMgfSBmcm9tICcuLi8uLi8uLi9hcGkvc2hhcmVkLXByaXZhdGUnO1xuaW1wb3J0IHR5cGUgeyBEZXBsb3ltZW50cywgV29ya0dyYXBoIH0gZnJvbSAnLi4vLi4vLi4vYXBpL3NoYXJlZC1wcml2YXRlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUGFyYW1ldGVyTWFwKHBhcmFtZXRlcnM/OiBNYXA8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+KTogeyBbbmFtZTogc3RyaW5nXTogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH0gfSB7XG4gIGNvbnN0IHBhcmFtZXRlck1hcDoge1xuICAgIFtuYW1lOiBzdHJpbmddOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfTtcbiAgfSA9IHt9O1xuICBwYXJhbWV0ZXJNYXBbJyonXSA9IHt9O1xuXG4gIGNvbnN0IGVudHJpZXMgPSBwYXJhbWV0ZXJzPy5lbnRyaWVzKCkgPz8gW107XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICBjb25zdCBbc3RhY2ssIHBhcmFtZXRlcl0gPSBrZXkuc3BsaXQoJzonLCAyKSBhcyBbc3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWRdO1xuICAgIGlmICghcGFyYW1ldGVyKSB7XG4gICAgICBwYXJhbWV0ZXJNYXBbJyonXVtzdGFja10gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFwYXJhbWV0ZXJNYXBbc3RhY2tdKSB7XG4gICAgICAgIHBhcmFtZXRlck1hcFtzdGFja10gPSB7fTtcbiAgICAgIH1cbiAgICAgIHBhcmFtZXRlck1hcFtzdGFja11bcGFyYW1ldGVyXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJhbWV0ZXJNYXA7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBhc3NldCBwdWJsaXNoaW5nIGFuZCBidWlsZGluZyBmcm9tIHRoZSB3b3JrIGdyYXBoIGZvciBhc3NldHMgdGhhdCBhcmUgYWxyZWFkeSBpbiBwbGFjZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlUHVibGlzaGVkQXNzZXRzRnJvbVdvcmtHcmFwaChncmFwaDogV29ya0dyYXBoLCBkZXBsb3ltZW50czogRGVwbG95bWVudHMsIG9wdGlvbnM6IERlcGxveU9wdGlvbnMpIHtcbiAgYXdhaXQgZ3JhcGgucmVtb3ZlVW5uZWNlc3NhcnlBc3NldHMoYXNzZXROb2RlID0+IGRlcGxveW1lbnRzLmlzU2luZ2xlQXNzZXRQdWJsaXNoZWQoYXNzZXROb2RlLmFzc2V0TWFuaWZlc3QsIGFzc2V0Tm9kZS5hc3NldCwge1xuICAgIHN0YWNrOiBhc3NldE5vZGUucGFyZW50U3RhY2ssXG4gICAgcm9sZUFybjogb3B0aW9ucy5yb2xlQXJuLFxuICAgIHN0YWNrTmFtZTogYXNzZXROb2RlLnBhcmVudFN0YWNrLnN0YWNrTmFtZSxcbiAgfSkpO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgSG90c3dhcFByb3BlcnR5T3ZlcnJpZGVzIGNsYXNzIG91dCBvZiB0aGUgSW50ZXJmYWNlIGV4cG9zZWQgdG8gdXNlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhvdHN3YXBQcm9wZXJ0eU92ZXJyaWRlcyhob3Rzd2FwUHJvcGVydGllczogSG90c3dhcFByb3BlcnRpZXMpOiBIb3Rzd2FwUHJvcGVydHlPdmVycmlkZXMge1xuICByZXR1cm4gbmV3IEhvdHN3YXBQcm9wZXJ0eU92ZXJyaWRlcyhuZXcgRWNzSG90c3dhcFByb3BlcnRpZXMoXG4gICAgaG90c3dhcFByb3BlcnRpZXMuZWNzLm1pbmltdW1IZWFsdGh5UGVyY2VudCxcbiAgICBob3Rzd2FwUHJvcGVydGllcy5lY3MubWF4aW11bUhlYWx0aHlQZXJjZW50LFxuICApKTtcbn1cbiJdfQ==