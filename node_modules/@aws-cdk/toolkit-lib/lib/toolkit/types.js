"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXN1bHQgaW50ZXJmYWNlIGZvciB0b29sa2l0LmRlcGxveSBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXBsb3lSZXN1bHQge1xuICAvKipcbiAgICogTWFwIG9mIGRlcGxveWVkIHN0YWNrcyBieSBhcnRpZmFjdCBJRC5cbiAgICovXG4gIHJlYWRvbmx5IHN0YWNrczogRGVwbG95ZWRTdGFja1tdO1xufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgdGhhdCBkZXNjcmliZSBhIHBoeXNpY2FsbHkgZGVwbG95ZWQgc3RhY2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQaHlzaWNhbFN0YWNrPEFybiBleHRlbmRzICdhcm5SZXF1aXJlZCcgfCAnYXJuT3B0aW9uYWwnID0gJ2FyblJlcXVpcmVkJz4ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHN0YWNrXG4gICAqXG4gICAqIEEgc3RhY2sgbmFtZSBpcyB1bmlxdWUgaW5zaWRlIGl0cyBlbnZpcm9ubWVudCwgYnV0IG5vdCB1bmlxdWUgZ2xvYmFsbHkuXG4gICAqL1xuICByZWFkb25seSBzdGFja05hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGVudmlyb25tZW50IG9mIHRoZSBzdGFja1xuICAgKlxuICAgKiBUaGlzIGVudmlyb25tZW50IGlzIGFsd2F5cyBjb25jcmV0ZSwgYmVjYXVzZSBldmVuIHRob3VnaCB0aGUgQ0RLIGFwcCdzXG4gICAqIHN0YWNrIG1heSBiZSByZWdpb24tYWdub3N0aWMsIGluIG9yZGVyIHRvIGJlIGRlcGxveWVkIGl0IHdpbGwgaGF2ZSB0byBoYXZlXG4gICAqIGJlZW4gc3BlY2lhbGl6ZWQuXG4gICAqL1xuICByZWFkb25seSBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBBUk4gb2YgdGhlIHN0YWNrXG4gICAqL1xuICByZWFkb25seSBzdGFja0FybjogQXJuIGV4dGVuZHMgJ2Fybk9wdGlvbmFsJyA/IHN0cmluZyB8IHVuZGVmaW5lZCA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCBhIGRlcGxveWVkIHN0YWNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95ZWRTdGFjayBleHRlbmRzIFBoeXNpY2FsU3RhY2sge1xuICAvKipcbiAgICogSGllcmFyY2hpY2FsIGlkZW50aWZpZXJcbiAgICpcbiAgICogVGhpcyB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBzdGFjayBpbnNpZGUgdGhlIENESyBhcHAuXG4gICAqXG4gICAqIEluIHByYWN0aWNlIHRoaXMgd2lsbCBiZSB0aGUgc3RhY2sncyBjb25zdHJ1Y3QgcGF0aCwgYnV0IHVuZm9ydHVuYXRlbHkgdGhlXG4gICAqIENsb3VkIEFzc2VtYmx5IGNvbnRyYWN0IGRvZXNuJ3QgcmVxdWlyZSBvciBndWFyYW50ZWUgdGhhdC5cbiAgICovXG4gIHJlYWRvbmx5IGhpZXJhcmNoaWNhbElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBvdXRwdXRzIG9mIHRoZSBkZXBsb3llZCBDbG91ZEZvcm1hdGlvbiBzdGFja1xuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0czogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuLyoqXG4gKiBBbiBlbnZpcm9ubWVudCwgd2hpY2ggaXMgYW4gKGFjY291bnQsIHJlZ2lvbikgcGFpclxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudmlyb25tZW50IHtcbiAgLyoqXG4gICAqIFRoZSBhY2NvdW50IG51bWJlclxuICAgKi9cbiAgcmVhZG9ubHkgYWNjb3VudDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVnaW9uIG51bWJlclxuICAgKi9cbiAgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVzdWx0IGludGVyZmFjZSBmb3IgdG9vbGtpdC5kZXBsb3kgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95UmVzdWx0IHtcbiAgLyoqXG4gICAqIExpc3Qgb2Ygc3RhY2tzIGRlcGxveWVkIGJ5IHRoaXMgb3BlcmF0aW9uXG4gICAqL1xuICByZWFkb25seSBzdGFja3M6IERlcGxveWVkU3RhY2tbXTtcbn1cblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCBhIGRlcGxveWVkIHN0YWNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95ZWRTdGFjayBleHRlbmRzIFBoeXNpY2FsU3RhY2sge1xuICAvKipcbiAgICogSGllcmFyY2hpY2FsIGlkZW50aWZpZXJcbiAgICpcbiAgICogVGhpcyB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBzdGFjayBpbnNpZGUgdGhlIENESyBhcHAuXG4gICAqXG4gICAqIEluIHByYWN0aWNlIHRoaXMgd2lsbCBiZSB0aGUgc3RhY2sncyBjb25zdHJ1Y3QgcGF0aCwgYnV0IHVuZm9ydHVuYXRlbHkgdGhlXG4gICAqIENsb3VkIEFzc2VtYmx5IGNvbnRyYWN0IGRvZXNuJ3QgcmVxdWlyZSBvciBndWFyYW50ZWUgdGhhdC5cbiAgICovXG4gIHJlYWRvbmx5IGhpZXJhcmNoaWNhbElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBvdXRwdXRzIG9mIHRoZSBkZXBsb3llZCBDbG91ZEZvcm1hdGlvbiBzdGFja1xuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0czogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuLyoqXG4gKiBBbiBlbnZpcm9ubWVudCwgd2hpY2ggaXMgYW4gKGFjY291bnQsIHJlZ2lvbikgcGFpclxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudmlyb25tZW50IHtcbiAgLyoqXG4gICAqIFRoZSBhY2NvdW50IG51bWJlclxuICAgKi9cbiAgcmVhZG9ubHkgYWNjb3VudDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVnaW9uIG51bWJlclxuICAgKi9cbiAgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVzdWx0IGludGVyZmFjZSBmb3IgdG9vbGtpdC5kZXN0cm95IG9wZXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlc3Ryb3lSZXN1bHQge1xuICAvKipcbiAgICogTGlzdCBvZiBzdGFja3MgZGVzdHJveWVkIGJ5IHRoaXMgb3BlcmF0aW9uXG4gICAqL1xuICByZWFkb25seSBzdGFja3M6IERlc3Ryb3llZFN0YWNrW107XG59XG5cbi8qKlxuICogQSBzdGFjayB0YXJnZXRlZCBieSBhIGRlc3Ryb3kgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVzdHJveWVkU3RhY2sgZXh0ZW5kcyBQaHlzaWNhbFN0YWNrPCdhcm5PcHRpb25hbCc+IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHN0YWNrIGV4aXN0ZWQgdG8gYmVnaW4gd2l0aFxuICAgKlxuICAgKiBJZiBgIXN0YWNrRXhpc3RlZGAsIHRoZSBzdGFjayBkaWRuJ3QgZXhpc3QsIHdhc24ndCBkZWxldGVkLCBhbmQgYHN0YWNrQXJuYFxuICAgKiB3aWxsIGJlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgcmVhZG9ubHkgc3RhY2tFeGlzdGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlc3VsdCBpbnRlcmZhY2UgZm9yIHRvb2xraXQucm9sbGJhY2sgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm9sbGJhY2tSZXN1bHQge1xuICAvKipcbiAgICogTGlzdCBvZiBzdGFja3Mgcm9sbGVkIGJhY2sgYnkgdGhpcyBvcGVyYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHN0YWNrczogUm9sbGVkQmFja1N0YWNrW107XG59XG5cbi8qKlxuICogQSBzdGFjayB0YXJnZXRlZCBieSBhIHJvbGxiYWNrIG9wZXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvbGxlZEJhY2tTdGFjayBleHRlbmRzIFBoeXNpY2FsU3RhY2sge1xuICAvKipcbiAgICogV2hhdCBvcGVyYXRpb24gd2UgZGlkIGZvciB0aGlzIHN0YWNrXG4gICAqXG4gICAqIEVpdGhlcjogd2UgZGlkIHJvbGwgaXQgYmFjaywgb3Igd2UgZGlkbid0IG5lZWQgdG8gcm9sbCBpdCBiYWNrIGJlY2F1c2VcbiAgICogaXQgd2FzIGFscmVhZHkgc3RhYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgcmVzdWx0OiBTdGFja1JvbGxiYWNrUmVzdWx0O1xufVxuXG4vKipcbiAqIEFuIGVudmlyb25tZW50LCB3aGljaCBpcyBhbiAoYWNjb3VudCwgcmVnaW9uKSBwYWlyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW52aXJvbm1lbnQge1xuICAvKipcbiAgICogVGhlIGFjY291bnQgbnVtYmVyXG4gICAqL1xuICByZWFkb25seSBhY2NvdW50OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSByZWdpb24gbnVtYmVyXG4gICAqL1xuICByZWFkb25seSByZWdpb246IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU3RhY2tSb2xsYmFja1Jlc3VsdCA9ICdyb2xsZWQtYmFjaycgfCAnYWxyZWFkeS1zdGFibGUnO1xuIl19