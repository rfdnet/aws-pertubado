"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonInteractiveIoHost = void 0;
const chalk = require("chalk");
const shared_private_1 = require("../api/shared-private");
const shell_env_1 = require("../util/shell-env");
/**
 * A simple IO host for a non interactive CLI that writes messages to the console and returns the default answer to all requests.
 */
class NonInteractiveIoHost {
    /**
     * Whether the IoHost is running in CI mode.
     *
     * In CI mode, all non-error output goes to stdout instead of stderr.
     */
    isCI;
    /**
     * Whether the host can use interactions and message styling.
     */
    isTTY;
    /**
     * The current threshold.
     *
     * Messages with a lower priority level will be ignored.
     */
    logLevel;
    // Stack Activity Printer
    activityPrinter;
    constructor(props = {}) {
        this.logLevel = props.logLevel ?? 'info';
        this.isTTY = props.isTTY ?? (0, shell_env_1.isTTY)();
        this.isCI = props.isCI ?? (0, shell_env_1.isCI)();
        this.activityPrinter = new shared_private_1.HistoryActivityPrinter({
            stream: this.selectStreamFromLevel('info'),
        });
    }
    /**
     * Notifies the host of a message.
     * The caller waits until the notification completes.
     */
    async notify(msg) {
        if (isStackActivity(msg)) {
            return this.activityPrinter.notify(msg);
        }
        if (!(0, shared_private_1.isMessageRelevantForLevel)(msg, this.logLevel)) {
            return;
        }
        const output = this.formatMessage(msg);
        const stream = this.selectStream(msg);
        stream?.write(output);
    }
    /**
     * Determines the output stream, based on message and configuration.
     */
    selectStream(msg) {
        return this.selectStreamFromLevel(msg.level);
    }
    /**
     * Determines the output stream, based on message level and configuration.
     */
    selectStreamFromLevel(level) {
        // The stream selection policy for the CLI is the following:
        //
        //   (1) Messages of level `result` always go to `stdout`
        //   (2) Messages of level `error` always go to `stderr`.
        //   (3a) All remaining messages go to `stderr`.
        //   (3b) If we are in CI mode, all remaining messages go to `stdout`.
        //
        switch (level) {
            case 'error':
                return process.stderr;
            case 'result':
                return process.stdout;
            default:
                return this.isCI ? process.stdout : process.stderr;
        }
    }
    /**
     * Notifies the host of a message that requires a response.
     *
     * If the host does not return a response the suggested
     * default response from the input message will be used.
     */
    async requestResponse(msg) {
        // in the non-interactive IoHost, no requests are promptable
        await this.notify(msg);
        return msg.defaultResponse;
    }
    /**
     * Formats a message for console output with optional color support
     */
    formatMessage(msg) {
        // apply provided style or a default style if we're in TTY mode
        let message_text = this.isTTY
            ? styleMap[msg.level](msg.message)
            : msg.message;
        // prepend timestamp if IoMessageLevel is DEBUG or TRACE. Postpend a newline.
        return ((msg.level === 'debug' || msg.level === 'trace')
            ? `[${this.formatTime(msg.time)}] ${message_text}`
            : message_text) + '\n';
    }
    /**
     * Formats date to HH:MM:SS
     */
    formatTime(d) {
        const pad = (n) => n.toString().padStart(2, '0');
        return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    }
}
exports.NonInteractiveIoHost = NonInteractiveIoHost;
const styleMap = {
    error: chalk.red,
    warn: chalk.yellow,
    result: chalk.white,
    info: chalk.white,
    debug: chalk.gray,
    trace: chalk.gray,
};
/**
 * Detect stack activity messages so they can be send to the printer.
 */
function isStackActivity(msg) {
    return [
        'CDK_TOOLKIT_I5501',
        'CDK_TOOLKIT_I5502',
        'CDK_TOOLKIT_I5503',
    ].includes(msg.code);
}
//# sourceMappingURL=data:application/json;base64,