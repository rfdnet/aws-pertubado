"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assemblyFromSource = assemblyFromSource;
const private_1 = require("../../api/cloud-assembly/private");
/**
 * Creates a Toolkit internal CloudAssembly from a CloudAssemblySource.
 *
 * The caller assumes ownership of the returned `StackAssembly`, and `dispose()`
 * should be called on this object after use.
 *
 * @param assemblySource the source for the cloud assembly
 * @param cache if the assembly should be cached, default: `true`
 * @returns the CloudAssembly object
 */
async function assemblyFromSource(ioHelper, assemblySource, cache = true) {
    if (assemblySource instanceof private_1.StackAssembly) {
        return assemblySource;
    }
    if (cache) {
        const ret = new private_1.StackAssembly(await assemblySource.produce(), ioHelper);
        return ret;
    }
    return new private_1.StackAssembly(await assemblySource.produce(), ioHelper);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXdCQSxnREFXQztBQWpDRCw4REFBaUU7QUFZakU7Ozs7Ozs7OztHQVNHO0FBQ0ksS0FBSyxVQUFVLGtCQUFrQixDQUFDLFFBQWtCLEVBQUUsY0FBb0MsRUFBRSxRQUFpQixJQUFJO0lBQ3RILElBQUksY0FBYyxZQUFZLHVCQUFhLEVBQUUsQ0FBQztRQUM1QyxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNWLE1BQU0sR0FBRyxHQUFHLElBQUksdUJBQWEsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4RSxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxPQUFPLElBQUksdUJBQWEsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNyRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgdHlwZSB7IElDbG91ZEFzc2VtYmx5U291cmNlIH0gZnJvbSAnLi4vLi4vYXBpL2Nsb3VkLWFzc2VtYmx5JztcbmltcG9ydCB7IFN0YWNrQXNzZW1ibHkgfSBmcm9tICcuLi8uLi9hcGkvY2xvdWQtYXNzZW1ibHkvcHJpdmF0ZSc7XG5pbXBvcnQgdHlwZSB7IFNka1Byb3ZpZGVyLCBJb0hlbHBlciwgUGx1Z2luSG9zdCB9IGZyb20gJy4uLy4uL2FwaS9zaGFyZWQtcHJpdmF0ZSc7XG5cbi8qKlxuICogSGVscGVyIHN0cnVjdCB0byBwYXNzIGludGVybmFsIHNlcnZpY2VzIGFyb3VuZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUb29sa2l0U2VydmljZXMge1xuICBzZGtQcm92aWRlcjogU2RrUHJvdmlkZXI7XG4gIGlvSGVscGVyOiBJb0hlbHBlcjtcbiAgcGx1Z2luSG9zdDogUGx1Z2luSG9zdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgVG9vbGtpdCBpbnRlcm5hbCBDbG91ZEFzc2VtYmx5IGZyb20gYSBDbG91ZEFzc2VtYmx5U291cmNlLlxuICpcbiAqIFRoZSBjYWxsZXIgYXNzdW1lcyBvd25lcnNoaXAgb2YgdGhlIHJldHVybmVkIGBTdGFja0Fzc2VtYmx5YCwgYW5kIGBkaXNwb3NlKClgXG4gKiBzaG91bGQgYmUgY2FsbGVkIG9uIHRoaXMgb2JqZWN0IGFmdGVyIHVzZS5cbiAqXG4gKiBAcGFyYW0gYXNzZW1ibHlTb3VyY2UgdGhlIHNvdXJjZSBmb3IgdGhlIGNsb3VkIGFzc2VtYmx5XG4gKiBAcGFyYW0gY2FjaGUgaWYgdGhlIGFzc2VtYmx5IHNob3VsZCBiZSBjYWNoZWQsIGRlZmF1bHQ6IGB0cnVlYFxuICogQHJldHVybnMgdGhlIENsb3VkQXNzZW1ibHkgb2JqZWN0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NlbWJseUZyb21Tb3VyY2UoaW9IZWxwZXI6IElvSGVscGVyLCBhc3NlbWJseVNvdXJjZTogSUNsb3VkQXNzZW1ibHlTb3VyY2UsIGNhY2hlOiBib29sZWFuID0gdHJ1ZSk6IFByb21pc2U8U3RhY2tBc3NlbWJseT4ge1xuICBpZiAoYXNzZW1ibHlTb3VyY2UgaW5zdGFuY2VvZiBTdGFja0Fzc2VtYmx5KSB7XG4gICAgcmV0dXJuIGFzc2VtYmx5U291cmNlO1xuICB9XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgY29uc3QgcmV0ID0gbmV3IFN0YWNrQXNzZW1ibHkoYXdhaXQgYXNzZW1ibHlTb3VyY2UucHJvZHVjZSgpLCBpb0hlbHBlcik7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHJldHVybiBuZXcgU3RhY2tBc3NlbWJseShhd2FpdCBhc3NlbWJseVNvdXJjZS5wcm9kdWNlKCksIGlvSGVscGVyKTtcbn1cbiJdfQ==