"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RichPropertyType = exports.PropertyScrutinyType = exports.ResourceScrutinyType = exports.isCollectionType = exports.Deprecation = exports.RichAttribute = exports.RichProperty = exports.RichTypedField = void 0;
const sorting_1 = require("../util/sorting");
class RichTypedField {
    constructor(field) {
        this.field = field;
        if (field === undefined) {
            throw new Error('Field is undefined');
        }
    }
    types() {
        return [...(this.field.previousTypes ?? []), this.field.type];
    }
    /**
     * Update the type of this property with a new type
     *
     * Only if it's not in the set of types already.
     */
    updateType(type) {
        const richType = new RichPropertyType(type);
        // Only add this type if we don't already have it. We are only doing comparisons where 'integer' and 'number'
        // are treated the same, for all other types we need strict equality. We used to use 'assignableTo' as a
        // condition, but these types will be rendered in both co- and contravariant positions, and so we really can't
        // do much better than full equality.
        if (this.types().some((t) => richType.equals(t))) {
            // Nothing to do, type is already in there.
            return false;
        }
        // Special case: if the new type is `string` and the old type is `date-time`, we assume this is
        // the same type but we dropped some formatting information. No need to make this a separate type.
        if (type.type === 'string' && this.types().some((t) => t.type === 'date-time')) {
            return false;
        }
        if (!this.field.previousTypes) {
            this.field.previousTypes = [];
        }
        this.field.previousTypes.push(this.field.type);
        this.field.type = type;
        return true;
    }
}
exports.RichTypedField = RichTypedField;
class RichProperty extends RichTypedField {
    constructor(property) {
        super(property);
    }
}
exports.RichProperty = RichProperty;
class RichAttribute extends RichTypedField {
    constructor(attr) {
        super(attr);
    }
}
exports.RichAttribute = RichAttribute;
var Deprecation;
(function (Deprecation) {
    /**
     * Not deprecated
     */
    Deprecation["NONE"] = "NONE";
    /**
     * Warn about use
     */
    Deprecation["WARN"] = "WARN";
    /**
     * Do not emit the value at all
     *
     * (Handle properties that were incorrectly added to the spec)
     */
    Deprecation["IGNORE"] = "IGNORE";
})(Deprecation = exports.Deprecation || (exports.Deprecation = {}));
function isCollectionType(x) {
    return x.type === 'array' || x.type === 'map';
}
exports.isCollectionType = isCollectionType;
/**
 * Mark a resource as a resource that needs additional scrutiy when added, removed or changed
 *
 * Used to mark resources that represent security policies.
 */
var ResourceScrutinyType;
(function (ResourceScrutinyType) {
    /**
     * No additional scrutiny
     */
    ResourceScrutinyType["None"] = "None";
    /**
     * An externally attached policy document to a resource
     *
     * (Common for SQS, SNS, S3, ...)
     */
    ResourceScrutinyType["ResourcePolicyResource"] = "ResourcePolicyResource";
    /**
     * This is an IAM policy on an identity resource
     *
     * (Basically saying: this is AWS::IAM::Policy)
     */
    ResourceScrutinyType["IdentityPolicyResource"] = "IdentityPolicyResource";
    /**
     * This is a Lambda Permission policy
     */
    ResourceScrutinyType["LambdaPermission"] = "LambdaPermission";
    /**
     * An ingress rule object
     */
    ResourceScrutinyType["IngressRuleResource"] = "IngressRuleResource";
    /**
     * A set of egress rules
     */
    ResourceScrutinyType["EgressRuleResource"] = "EgressRuleResource";
    /**
     * AWS::SSO::Assignment
     *
     * IAM Identity Center (formerly known as SSO)
     */
    ResourceScrutinyType["SsoAssignmentResource"] = "SsoAssignmentResource";
    /**
     * AWS::SSO::InstanceAccessControlAttributeConfiguration
     *
     * IAM Identity Center (formerly known as SSO)
     */
    ResourceScrutinyType["SsoInstanceACAConfigResource"] = "SsoInstanceACAConfigResource";
    /**
     * AWS::SSO::PermissionSet
     *
     * IAM Identity Center (formerly known as SSO)
     */
    ResourceScrutinyType["SsoPermissionSet"] = "SsoPermissionSet";
})(ResourceScrutinyType = exports.ResourceScrutinyType || (exports.ResourceScrutinyType = {}));
/**
 * Mark a property as a property that needs additional scrutiny when it changes
 *
 * Used to mark sensitive properties that have security-related implications.
 */
var PropertyScrutinyType;
(function (PropertyScrutinyType) {
    /**
     * No additional scrutiny
     */
    PropertyScrutinyType["None"] = "None";
    /**
     * This is an IAM policy directly on a resource
     */
    PropertyScrutinyType["InlineResourcePolicy"] = "InlineResourcePolicy";
    /**
     * Either an AssumeRolePolicyDocument or a dictionary of policy documents
     */
    PropertyScrutinyType["InlineIdentityPolicies"] = "InlineIdentityPolicies";
    /**
     * A list of managed policies (on an identity resource)
     */
    PropertyScrutinyType["ManagedPolicies"] = "ManagedPolicies";
    /**
     * A set of ingress rules (on a security group)
     */
    PropertyScrutinyType["IngressRules"] = "IngressRules";
    /**
     * A set of egress rules (on a security group)
     */
    PropertyScrutinyType["EgressRules"] = "EgressRules";
})(PropertyScrutinyType = exports.PropertyScrutinyType || (exports.PropertyScrutinyType = {}));
class RichPropertyType {
    constructor(type) {
        this.type = type;
    }
    equals(rhs) {
        switch (this.type.type) {
            case 'integer':
            case 'boolean':
            case 'date-time':
            case 'json':
            case 'null':
            case 'number':
            case 'string':
            case 'tag':
                return rhs.type === this.type.type;
            case 'array':
            case 'map':
                return rhs.type === this.type.type && new RichPropertyType(this.type.element).equals(rhs.element);
            case 'ref':
                return rhs.type === 'ref' && this.type.reference.$ref === rhs.reference.$ref;
            case 'union':
                const lhsKey = this.sortKey();
                const rhsKey = new RichPropertyType(rhs).sortKey();
                return lhsKey.length === rhsKey.length && lhsKey.every((l, i) => l === rhsKey[i]);
        }
    }
    /**
     * Whether the current type is JavaScript-equal to the RHS type
     *
     * Same as normal equality, but consider `integer` and `number` the same types.
     */
    javascriptEquals(rhs) {
        switch (this.type.type) {
            case 'number':
            case 'integer':
                // Widening
                return rhs.type === 'integer' || rhs.type === 'number';
            case 'array':
            case 'map':
                return rhs.type === this.type.type && new RichPropertyType(this.type.element).javascriptEquals(rhs.element);
            case 'union':
                if (rhs.type !== 'union') {
                    return false;
                }
                // Every type in this union needs to be equal one type in RHS
                return this.type.types.every((t1) => rhs.types.some((t2) => new RichPropertyType(t1).javascriptEquals(t2)));
            default:
                // For anything else, need strict equality
                return this.equals(rhs);
        }
    }
    /**
     * Whether the current type is assignable to the RHS type.
     *
     * This is means every type member of the LHS must be present in the RHS type
     */
    assignableTo(rhs) {
        const extractMembers = (type) => (type.type == 'union' ? type.types : [type]);
        const asRichType = (type) => new RichPropertyType(type);
        const rhsMembers = extractMembers(rhs);
        for (const lhsMember of extractMembers(this.type).map(asRichType)) {
            if (!rhsMembers.some((type) => lhsMember.equals(type))) {
                return false;
            }
        }
        return true;
    }
    /**
     * Return a version of this type, but with all type unions in a regularized order
     */
    normalize(db) {
        switch (this.type.type) {
            case 'array':
            case 'map':
                return new RichPropertyType({
                    type: this.type.type,
                    element: new RichPropertyType(this.type.element).normalize(db).type,
                });
            case 'union':
                const types = this.type.types
                    .map((t) => new RichPropertyType(t).normalize(db))
                    .map((t) => [t, t.sortKey(db)]);
                types.sort((0, sorting_1.sortKeyComparator)(([_, sortKey]) => sortKey));
                return new RichPropertyType({
                    type: 'union',
                    types: types.map(([t, _]) => t.type),
                });
            default:
                return this;
        }
    }
    stringify(db, withId = true) {
        switch (this.type.type) {
            case 'integer':
            case 'boolean':
            case 'date-time':
            case 'json':
            case 'null':
            case 'number':
            case 'string':
            case 'tag':
                return this.type.type;
            case 'array':
                return `Array<${new RichPropertyType(this.type.element).stringify(db, withId)}>`;
            case 'map':
                return `Map<string, ${new RichPropertyType(this.type.element).stringify(db, withId)}>`;
            case 'ref':
                const type = db.get('typeDefinition', this.type.reference);
                return withId ? `${type.name}(${this.type.reference.$ref})` : type.name;
            case 'union':
                return this.type.types.map((t) => new RichPropertyType(t).stringify(db, withId)).join(' | ');
        }
    }
    /**
     * Return a sortable key based on this type
     *
     * If a database is given, type definitions will be sorted based on type name,
     * otherwise on identifier
     */
    sortKey(db) {
        switch (this.type.type) {
            case 'integer':
            case 'boolean':
            case 'date-time':
            case 'json':
            case 'null':
            case 'number':
            case 'string':
            case 'tag':
                return ['0', this.type.type];
            case 'array':
            case 'map':
                return ['1', this.type.type, ...new RichPropertyType(this.type.element).sortKey(db)];
            case 'ref':
                return ['2', this.type.type, db?.get('typeDefinition', this.type.reference)?.name ?? this.type.reference.$ref];
            case 'union':
                const typeKeys = this.type.types.map((t) => new RichPropertyType(t).sortKey(db));
                typeKeys.sort((0, sorting_1.sortKeyComparator)((x) => x));
                return ['3', this.type.type, ...typeKeys.flatMap((x) => x)];
        }
    }
}
exports.RichPropertyType = RichPropertyType;
//# sourceMappingURL=data:application/json;base64,