"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAGIC_V2NEXT = exports.FlagType = void 0;
exports.compareVersions = compareVersions;
var FlagType;
(function (FlagType) {
    /**
     * Change the default behavior of the API
     *
     * The old behavior is still valid, and possible to achieve with source
     * code changes, but we recommend the new behavior instead.
     *
     * Also valid for changes that don't affect CloudFormation, but the CXAPI
     * contract.
     */
    FlagType[FlagType["ApiDefault"] = 0] = "ApiDefault";
    /**
     * Address a bug in a way that requires contract breaking or has availability implications for existing infrastructure
     *
     * The old behavior is not recommended, and shouldn't have been possible in the first place.
     * We only have this flag because we can't roll out the fix to everyone
     * automatically for fear of breakage.
     */
    FlagType[FlagType["BugFix"] = 1] = "BugFix";
    /**
     * Advertise the presence of this context option in `cdk.json`
     */
    FlagType[FlagType["VisibleContext"] = 2] = "VisibleContext";
    /**
     * Use this type for flags that are to be removed on a set date
     */
    FlagType[FlagType["Temporary"] = 3] = "Temporary";
})(FlagType || (exports.FlagType = FlagType = {}));
/**
 * The magic value that will be substituted at version bump time with the actual
 * new V2 version.
 *
 * Do not import this constant in the `features.ts` file, or the substitution
 * process won't work.
 */
exports.MAGIC_V2NEXT = 'V2NEXT';
/**
 * Compare two versions, returning -1, 0, or 1.
 */
function compareVersions(a, b) {
    if (a === b) {
        return 0;
    }
    if (a === undefined) {
        return -1;
    }
    if (b === undefined) {
        return 1;
    }
    const as = a.split('.').map(x => parseInt(x, 10));
    const bs = b.split('.').map(x => parseInt(x, 10));
    if (a === exports.MAGIC_V2NEXT) {
        return bs[0] <= 2 ? 1 : -1;
    }
    if (b === exports.MAGIC_V2NEXT) {
        return as[0] <= 2 ? -1 : 1;
    }
    for (let i = 0; i < Math.min(as.length, bs.length); i++) {
        if (as[i] < bs[i]) {
            return -1;
        }
        if (as[i] > bs[i]) {
            return 1;
        }
    }
    return as.length - bs.length;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZy1tb2RlbGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZsYWctbW9kZWxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBdUVBLDBDQWdCQztBQXZGRCxJQUFZLFFBOEJYO0FBOUJELFdBQVksUUFBUTtJQUNsQjs7Ozs7Ozs7T0FRRztJQUNILG1EQUFVLENBQUE7SUFFVjs7Ozs7O09BTUc7SUFDSCwyQ0FBTSxDQUFBO0lBRU47O09BRUc7SUFDSCwyREFBYyxDQUFBO0lBRWQ7O09BRUc7SUFDSCxpREFBUyxDQUFBO0FBQ1gsQ0FBQyxFQTlCVyxRQUFRLHdCQUFSLFFBQVEsUUE4Qm5CO0FBNkJEOzs7Ozs7R0FNRztBQUNVLFFBQUEsWUFBWSxHQUFHLFFBQVEsQ0FBQztBQUVyQzs7R0FFRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxDQUFxQixFQUFFLENBQXFCO0lBQzFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQUMsT0FBTyxDQUFDLENBQUM7SUFBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFLENBQUM7UUFBQyxPQUFPLENBQUMsQ0FBQztJQUFDLENBQUM7SUFFbEMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFbEQsSUFBSSxDQUFDLEtBQUssb0JBQVksRUFBRSxDQUFDO1FBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUN2RCxJQUFJLENBQUMsS0FBSyxvQkFBWSxFQUFFLENBQUM7UUFBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDO0lBRXZELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEQsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUNqQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIEZsYWdUeXBlIHtcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgQVBJXG4gICAqXG4gICAqIFRoZSBvbGQgYmVoYXZpb3IgaXMgc3RpbGwgdmFsaWQsIGFuZCBwb3NzaWJsZSB0byBhY2hpZXZlIHdpdGggc291cmNlXG4gICAqIGNvZGUgY2hhbmdlcywgYnV0IHdlIHJlY29tbWVuZCB0aGUgbmV3IGJlaGF2aW9yIGluc3RlYWQuXG4gICAqXG4gICAqIEFsc28gdmFsaWQgZm9yIGNoYW5nZXMgdGhhdCBkb24ndCBhZmZlY3QgQ2xvdWRGb3JtYXRpb24sIGJ1dCB0aGUgQ1hBUElcbiAgICogY29udHJhY3QuXG4gICAqL1xuICBBcGlEZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBBZGRyZXNzIGEgYnVnIGluIGEgd2F5IHRoYXQgcmVxdWlyZXMgY29udHJhY3QgYnJlYWtpbmcgb3IgaGFzIGF2YWlsYWJpbGl0eSBpbXBsaWNhdGlvbnMgZm9yIGV4aXN0aW5nIGluZnJhc3RydWN0dXJlXG4gICAqXG4gICAqIFRoZSBvbGQgYmVoYXZpb3IgaXMgbm90IHJlY29tbWVuZGVkLCBhbmQgc2hvdWxkbid0IGhhdmUgYmVlbiBwb3NzaWJsZSBpbiB0aGUgZmlyc3QgcGxhY2UuXG4gICAqIFdlIG9ubHkgaGF2ZSB0aGlzIGZsYWcgYmVjYXVzZSB3ZSBjYW4ndCByb2xsIG91dCB0aGUgZml4IHRvIGV2ZXJ5b25lXG4gICAqIGF1dG9tYXRpY2FsbHkgZm9yIGZlYXIgb2YgYnJlYWthZ2UuXG4gICAqL1xuICBCdWdGaXgsXG5cbiAgLyoqXG4gICAqIEFkdmVydGlzZSB0aGUgcHJlc2VuY2Ugb2YgdGhpcyBjb250ZXh0IG9wdGlvbiBpbiBgY2RrLmpzb25gXG4gICAqL1xuICBWaXNpYmxlQ29udGV4dCxcblxuICAvKipcbiAgICogVXNlIHRoaXMgdHlwZSBmb3IgZmxhZ3MgdGhhdCBhcmUgdG8gYmUgcmVtb3ZlZCBvbiBhIHNldCBkYXRlXG4gICAqL1xuICBUZW1wb3JhcnksXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxhZ0luZm9CYXNlIHtcbiAgLyoqIFNpbmdsZS1saW5lIGRlc2NyaXB0aW9uIGZvciB0aGUgZmxhZyAqL1xuICByZWFkb25seSBzdW1tYXJ5OiBzdHJpbmc7XG4gIC8qKiBEZXRhaWxlZCBkZXNjcmlwdGlvbiBmb3IgdGhlIGZsYWcgKE1hcmtkb3duKSAqL1xuICByZWFkb25seSBkZXRhaWxzTWQ6IHN0cmluZztcbiAgLyoqIFZlcnNpb24gbnVtYmVyIHRoZSBmbGFnIHdhcyBpbnRyb2R1Y2VkIGluIGVhY2ggdmVyc2lvbiBsaW5lLiBgdW5kZWZpbmVkYCBtZWFucyBmbGFnIGRvZXMgbm90IGV4aXN0IGluIHRoYXQgbGluZS4gKi9cbiAgcmVhZG9ubHkgaW50cm9kdWNlZEluOiB7IHYxPzogc3RyaW5nOyB2Mj86IHN0cmluZyB9O1xuICAvKiogRGVmYXVsdCB2YWx1ZSwgaWYgZmxhZyBpcyB1bnNldCBieSB1c2VyLiBBZGRpbmcgYSBmbGFnIHdpdGggYSBkZWZhdWx0IG1heSBub3QgY2hhbmdlIGJlaGF2aW9yIGFmdGVyIEdBISAqL1xuICByZWFkb25seSBkZWZhdWx0cz86IHsgdjE/OiBhbnk7IHYyPzogYW55IH07XG4gIC8qKiBEZWZhdWx0IGluIG5ldyBwcm9qZWN0cyAqL1xuICByZWFkb25seSByZWNvbW1lbmRlZFZhbHVlOiBhbnk7XG59XG5cbi8qKiBGbGFnIGluZm9ybWF0aW9uLCBhZGRpbmcgcmVxdWlyZWQgZmllbGRzIGlmIHByZXNlbnQgKi9cbmV4cG9ydCB0eXBlIEZsYWdJbmZvID0gRmxhZ0luZm9CYXNlICYgKFxuICB8IHsgcmVhZG9ubHkgdHlwZTogRmxhZ1R5cGUuQXBpRGVmYXVsdDtcblxuICAgIC8qKiBEZXNjcmliZSBob3cgdG8gdXNlIHRoZSBBUEkgdG8gYWNoaWV2ZSBwcmUtZmxhZyBiZWhhdmlvciwgaWYgdGhlIGZsYWcgaXMgc2V0IChNYXJrZG93bikgKi9cbiAgICByZWFkb25seSBjb21wYXRpYmlsaXR5V2l0aE9sZEJlaGF2aW9yTWQ6IHN0cmluZzsgfVxuICB8IHsgcmVhZG9ubHkgdHlwZTogRmxhZ1R5cGUuQnVnRml4O1xuICAgIC8qKiBEZXNjcmliZSBob3cgdG8gZGVhbCB3aXRoIHRoZSBjaGFuZ2UgaWYgdGhlIGZsYWcgaXMgc2V0IChNYXJrZG93bikgKi9cbiAgICByZWFkb25seSBjb21wYXRpYmlsaXR5V2l0aE9sZEJlaGF2aW9yTWQ/OiBzdHJpbmc7IH1cbiAgfCB7IHJlYWRvbmx5IHR5cGU6IEZsYWdUeXBlLlZpc2libGVDb250ZXh0IH1cbiAgfCB7IHJlYWRvbmx5IHR5cGU6IEZsYWdUeXBlLlRlbXBvcmFyeTtcbiAgICByZWFkb25seSBjb21wYXRpYmlsaXR5V2l0aE9sZEJlaGF2aW9yTWQ/OiBzdHJpbmc7IH1cbik7XG5cbi8qKlxuICogVGhlIG1hZ2ljIHZhbHVlIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCBhdCB2ZXJzaW9uIGJ1bXAgdGltZSB3aXRoIHRoZSBhY3R1YWxcbiAqIG5ldyBWMiB2ZXJzaW9uLlxuICpcbiAqIERvIG5vdCBpbXBvcnQgdGhpcyBjb25zdGFudCBpbiB0aGUgYGZlYXR1cmVzLnRzYCBmaWxlLCBvciB0aGUgc3Vic3RpdHV0aW9uXG4gKiBwcm9jZXNzIHdvbid0IHdvcmsuXG4gKi9cbmV4cG9ydCBjb25zdCBNQUdJQ19WMk5FWFQgPSAnVjJORVhUJztcblxuLyoqXG4gKiBDb21wYXJlIHR3byB2ZXJzaW9ucywgcmV0dXJuaW5nIC0xLCAwLCBvciAxLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVZlcnNpb25zKGE6IHN0cmluZyB8IHVuZGVmaW5lZCwgYjogc3RyaW5nIHwgdW5kZWZpbmVkKTogbnVtYmVyIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIDA7IH1cbiAgaWYgKGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gLTE7IH1cbiAgaWYgKGIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gMTsgfVxuXG4gIGNvbnN0IGFzID0gYS5zcGxpdCgnLicpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSk7XG4gIGNvbnN0IGJzID0gYi5zcGxpdCgnLicpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSk7XG5cbiAgaWYgKGEgPT09IE1BR0lDX1YyTkVYVCkgeyByZXR1cm4gYnNbMF0gPD0gMiA/IDEgOiAtMTsgfVxuICBpZiAoYiA9PT0gTUFHSUNfVjJORVhUKSB7IHJldHVybiBhc1swXSA8PSAyID8gLTEgOiAxOyB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihhcy5sZW5ndGgsIGJzLmxlbmd0aCk7IGkrKykge1xuICAgIGlmIChhc1tpXSA8IGJzW2ldKSB7IHJldHVybiAtMTsgfVxuICAgIGlmIChhc1tpXSA+IGJzW2ldKSB7IHJldHVybiAxOyB9XG4gIH1cbiAgcmV0dXJuIGFzLmxlbmd0aCAtIGJzLmxlbmd0aDtcbn1cbiJdfQ==