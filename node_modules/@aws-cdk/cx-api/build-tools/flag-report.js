"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate FEATURE_FLAGS.md, a report of all current feature flags
 */
const fs_1 = require("fs");
const path = require("path");
const feats = require("../lib/features");
const flag_modeling_1 = require("../lib/private/flag-modeling");
async function main() {
    await updateMarkdownFile(path.join(__dirname, '..', 'FEATURE_FLAGS.md'), {
        table: flagsTable(),
        details: flagsDetails(),
        json: recommendedJson(),
        removed: removedFlags(),
        diff: changedFlags(),
        migratejson: migrateJson(),
    });
    // Write to the package root
    await updateRecommendedFlagsFile(path.join(__dirname, '..', '..', 'recommended-feature-flags.json'));
}
function flagsTable() {
    return renderTable([
        ['Flag', 'Summary', 'Since', 'Type'],
        ...v2flags().map(([name, flag]) => [
            renderLink(mdEsc(name), githubHeadingLink(flagDetailsHeading(name, flag))),
            flag.summary,
            flag.introducedIn.v2 ?? '',
            renderType(flag.type, 'short'),
        ]),
    ]);
}
function removedFlags() {
    const removedInV2 = flags(flag => flag.introducedIn.v2 === undefined && flag.introducedIn.v1 !== undefined);
    return renderTable([
        ['Flag', 'Summary', 'Type', 'Since'],
        ...removedInV2.map(([name, flag]) => [
            renderLink(mdEsc(name), githubHeadingLink(flagDetailsHeading(name, flag))),
            flag.summary,
            renderType(flag.type, 'short'),
            flag.introducedIn.v1 ?? '',
        ]),
    ]);
}
function changedFlags() {
    const changedInV2 = flags(flag => !!flag.defaults?.v2 && !!flag.introducedIn.v2);
    return renderTable([
        ['Flag', 'Summary', 'Type', 'Since', 'v1 default', 'v2 default'],
        ...changedInV2.map(([name, flag]) => [
            renderLink(mdEsc(name), githubHeadingLink(flagDetailsHeading(name, flag))),
            flag.summary,
            renderType(flag.type, 'short'),
            flag.introducedIn.v1 ?? '',
            renderValue(false),
            renderValue(flag.defaults?.v2),
        ]),
    ]);
}
function migrateJson() {
    const changedInV2 = flags(flag => !!flag.defaults?.v2 && !!flag.introducedIn.v2 && !!flag.introducedIn.v1);
    const context = Object.fromEntries(changedInV2.map(([name, _]) => [name, false]));
    return [
        '```json',
        JSON.stringify({ context }, undefined, 2),
        '```',
    ].join('\n');
}
function flagsDetails() {
    const allFlags = flags(_ => true);
    return allFlags.flatMap(([name, flag]) => [
        `### ${flagDetailsHeading(name, flag)}`,
        '',
        `*${flag.summary}*`,
        '',
        `Flag type: ${renderType(flag.type, 'long')}`,
        '',
        dedent(flag.detailsMd),
        '',
        renderTable([
            ['Since', 'Default', 'Recommended'],
            // V1
            flag.introducedIn.v1
                ? [flag.introducedIn.v1, renderValue(false), renderValue(flag.recommendedValue)]
                : ['(not in v1)', '', ''],
            // V2
            flag.introducedIn.v2
                ? [flag.introducedIn.v2, renderValue(flag.defaults?.v2 ?? false), renderValue(flag.recommendedValue)]
                : flag.defaults?.v2 !== undefined
                    ? ['(default in v2)', renderValue(flag.defaults?.v2), '']
                    : ['(not in v2)', '', ''],
        ]),
        ...oldBehavior(flag) ? [
            `**Compatibility with old behavior:** ${oldBehavior(flag)}`,
            '',
        ] : [],
        '',
    ]).join('\n');
}
function oldBehavior(flag) {
    switch (flag.type) {
        case flag_modeling_1.FlagType.ApiDefault: return flag.compatibilityWithOldBehaviorMd;
        case flag_modeling_1.FlagType.BugFix: return flag.compatibilityWithOldBehaviorMd;
        case flag_modeling_1.FlagType.VisibleContext: return undefined;
        case flag_modeling_1.FlagType.Temporary: return flag.compatibilityWithOldBehaviorMd;
    }
}
function recommendedJson() {
    return [
        '```json',
        JSON.stringify({ context: feats.CURRENTLY_RECOMMENDED_FLAGS }, undefined, 2),
        '```',
    ].join('\n');
}
function v2flags() {
    return flags(flag => flag.introducedIn.v2 !== undefined);
}
function flags(pred) {
    const entries = Object.entries(feats.FLAGS)
        .filter(([_, flag]) => pred(flag));
    entries.sort((a, b) => firstCmp(
    // Sort by versions first
    (0, flag_modeling_1.compareVersions)(a[1].introducedIn.v2, b[1].introducedIn.v2), (0, flag_modeling_1.compareVersions)(a[1].introducedIn.v1, b[1].introducedIn.v1), 
    // Then sort by name
    a[0].localeCompare(b[0])));
    return entries;
}
function renderType(type, flavor) {
    switch (type) {
        case flag_modeling_1.FlagType.ApiDefault: return longShort('New default behavior', 'new default');
        case flag_modeling_1.FlagType.BugFix: return longShort('Backwards incompatible bugfix', 'fix');
        case flag_modeling_1.FlagType.VisibleContext: return longShort('Configuration option', 'config');
        case flag_modeling_1.FlagType.Temporary: return longShort('Temporary flag', 'temporary');
    }
    function longShort(long, short) {
        return flavor === 'long' ? long : short;
    }
}
function renderTable(rows) {
    return [
        '',
        '| ' + rows[0].join(' | ') + ' |',
        '| ' + rows[0].map(_ => '-----').join(' | ') + ' |',
        ...rows.slice(1).map(row => '| ' + row.join(' | ') + ' |'),
        '',
    ].join('\n');
}
/**
 * Return the heading that will be used to caption this flag's details
 */
function flagDetailsHeading(name, _) {
    return name;
}
/**
 * Return a link that is valid on GitHub to refer to a heading
 */
function githubHeadingLink(heading) {
    return `#${heading.toLowerCase().replace(/ /g, '-').replace(/[^a-z0-9_-]/g, '')}`;
}
/**
 * Remove shared leading whitespace from all non-empty lines
 */
function dedent(body) {
    const lines = body.split('\n').filter((x) => x.trim() !== '');
    const leadingWs = lines.map(x => x.match(/^ */)?.[0].length ?? 0);
    const sharedWs = Math.min(...leadingWs);
    const re = new RegExp('^' + ' '.repeat(sharedWs), 'mg');
    return body.replace(re, '').trim();
}
function renderValue(x) {
    return `\`${JSON.stringify(x)}\``;
}
function renderLink(caption, link) {
    return `[${caption}](${link})`;
}
function mdEsc(x) {
    return x.replace(/_/g, '\\_');
}
async function updateMarkdownFile(filename, sections) {
    let contents = await fs_1.promises.readFile(filename, { encoding: 'utf-8' });
    for (const [section, value] of Object.entries(sections)) {
        const re = new RegExp(`<!-- BEGIN ${section} -->(.*)<!-- END ${section} -->`, 's');
        contents = contents.replace(re, `<!-- BEGIN ${section} -->\n${value}\n<!-- END ${section} -->`);
    }
    await fs_1.promises.writeFile(filename, contents, { encoding: 'utf-8' });
}
async function updateRecommendedFlagsFile(filename) {
    await fs_1.promises.writeFile(filename, JSON.stringify(feats.CURRENTLY_RECOMMENDED_FLAGS, undefined, 2), { encoding: 'utf-8' });
}
function firstCmp(...xs) {
    return xs.find(x => x !== 0) ?? 0;
}
main().catch(e => {
    // eslint-disable-next-line no-console
    console.error(e);
    process.exitCode = 1;
});
//# sourceMappingURL=data:application/json;base64,